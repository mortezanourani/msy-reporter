@using Microsoft.AspNetCore.Components.QuickGrid
@inject IdentityUserAccessor UserAccessor

@page "/Dashboard/Courses/Employees"

@rendermode InteractiveServer

<PageTitle>شناسنامه آموزشی</PageTitle>

<AuthorizeView Roles="Administrators" Context="authContext">
	<Authorized>
		<div class="courses-top-menu">
			<h6 class="panel-title">مدیریت شناسنامه آموزشی</h6>
			<span class="top-menu-links">
				<a class="panel-link" href="/Dashboard/Courses/Add">
					<img src="/icons/course-add.svg" />
					افزودن دوره
				</a>
			</span>
		</div>
		<div class="row">
			<div class="col1-1">
				<div class="card courses-employees-card">
					<div class="card-header border-bottom">
						<h6 class="title">فهرست افرادی که در دوره ها شرکت نموده اند</h6>
					</div>
					<div class="card-body">
						<div class="courses-employees-list">
							@if (employees is not null)
							{
								<QuickGrid Items="employees" Pagination="pagination" Theme="" Class="courses-table">
									<PropertyColumn Title="نام و نام خانوادگی" Property="@(employee => string.Format("{0} {1}", employee.FirstName, employee.LastName))" />
									<PropertyColumn Title="کد ملی" Property="@(employee => employee.SeenCode)" />
									<PropertyColumn Title="نام پدر" Property="@(employee => employee.FatherName)" />
									<PropertyColumn Title="تاریخ تولد" Property="@(employee => employee.BirthDate!.Replace("-", "/"))" />
									<TemplateColumn>
										<a class="edit-link" href="/Dashboard/Employee/Courses/@context.AccountId">
											<img src="/icons/user-courses.svg" />
										</a>
									</TemplateColumn>
								</QuickGrid>
							}
						</div>
					</div>

					<div class="card-footer px-0">
						<div class="paginator">
							<nav role="navigation">
								@if (pagination.TotalItemCount.HasValue)
								{
									var totalPages = pagination.TotalItemCount;
									var pageIndex = pagination.CurrentPageIndex;
									var currentPage = pageIndex + 1;
									var lastPage = pagination.LastPageIndex + 1;
									var firstItemNumber = 1 + (pagination.ItemsPerPage * pagination.CurrentPageIndex);
									var lastItemNumber = pagination.ItemsPerPage * (pagination.CurrentPageIndex + 1);
									<div class="total">@string.Format("صفحه {0} از {1}", currentPage, lastPage)</div>
									<span class="buttons-wrapper">
										<button @onclick="@(() => GoToPageAsync(pageIndex - 1))"
										class="btn"
										aria-current="@AriaCurrentValue(pageIndex - 1)"
										aria-label="@(pageIndex - 1)"
										disabled=@((pageIndex <= 0) ? "disabled" : false)>
											<span class="material-symbols-rounded">chevron_right</span>
										</button>
										<button @onclick="@(() => GoToPageAsync(pageIndex + 1))"
										class="btn"
										aria-current="@AriaCurrentValue(pageIndex + 1)"
										aria-label="@(pageIndex + 1)"
										disabled=@((currentPage >= lastPage) ? "disabled" : false)>
											<span class="material-symbols-rounded">chevron_left</span>
										</button>
									</span>
								}
							</nav>
						</div>
					</div>
				</div>
			</div>
		</div>
	</Authorized>
</AuthorizeView>

@code {
	private AppDbContext context = default!;

	private IQueryable<Employee>? employees;

	protected override async Task OnInitializedAsync()
	{
		context = DbFactory.CreateDbContext();
		employees ??= context.Employees
			.Where(employee => employee.Courses.Any())
			.OrderBy(employee => employee.LastName);

		pagination.TotalItemCountChanged += (sender, eventArgs) => StateHasChanged();
	}

	private PaginationState pagination = new PaginationState { ItemsPerPage = 10 };

	private async Task GoToPageAsync(int pageIndex)
	{
		await pagination.SetCurrentPageIndexAsync(pageIndex);
	}

	private string? AriaCurrentValue(int pageIndex)
		=> pagination.CurrentPageIndex == pageIndex ? "page" : null;
}
