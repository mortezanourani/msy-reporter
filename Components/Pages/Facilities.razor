@using Microsoft.AspNetCore.Components.QuickGrid

@page "/SportFacilities"

<PageTitle>Sport Facilities</PageTitle>

<h2 class="page-title mb-3">اماکن ورزشی</h2>

<FacilitiesCard />
<CityFacilitiesCard />

<div class="row">
    <div class="col1-1">
        <div class="card">
            <div class="card-header">
                <h6 class="title">فهرست اماکن ورزشی شهرستان @city!.PersianName</h6>
                <InputSelect class="select" @bind-Value="cityId" @onclick="SelectCity">
                    @foreach (City city in cities!)
                    {
                        <option value="@city.Id">@city.PersianName</option>
                    }
                </InputSelect>
            </div>
            <div class="card-body">
                <div class="facilities-list">
                    @if(privateFacilities is not null)
                    {
                        <QuickGrid Items="privateFacilities!" Pagination="pagination" Theme="" Class="projects-table">
                            <PropertyColumn Sortable="true" Title="عنوان باشگاه" Property="@(facility => facility.Name)" />
                            <PropertyColumn Sortable="true" Title="نوع مکان" Property="@(facility => facility.TypeId != null ? facility.Type!.PersianTitle : "نامشخص")" />
                            <PropertyColumn Sortable="true" Title="سال آغاز مجوز" Property="@(facility => facility.PrivateFacilityLicenses!.FirstOrDefault()!.StartDate)" />
                            <PropertyColumn Sortable="true" Title="سال پایان مجوز" Property="@(facility => facility.PrivateFacilityLicenses!.FirstOrDefault()!.ExpireDate)" />
                            <TemplateColumn>
                                <a class="info-link" href="/Projects/@context.Id">
                                    <span class="material-symbols-rounded">info</span>
                                </a>
                            </TemplateColumn>
                        </QuickGrid>

                        <div class="paginator">
                            <nav role="navigation">
                                @if (pagination.TotalItemCount.HasValue)
                                {
                                    for (var pageIndex = 0; pageIndex <= pagination.LastPageIndex; pageIndex++)
                                    {
                                        var capturedIndex = pageIndex;
                                        <button @onclick="@(() => GoToPageAsync(capturedIndex))"
                                        class="btn @PageButtonClass(capturedIndex)"
                                        aria-current="@AriaCurrentValue(capturedIndex)"
                                        aria-label="@(pageIndex + 1)">
                                            @(pageIndex + 1)
                                        </button>
                                    }
                                }
                            </nav>
                            <div class="total">
                                @string.Format("{0} باشگاه خصوصی", pagination.TotalItemCount)
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private AppDbContext context = default!;

    private int cityId = 1;

    private City? city;
    private IQueryable<City>? cities;
    private IQueryable<PrivateFacility>? privateFacilities;

    protected override void OnInitialized()
    {
        context = DbFactory.CreateDbContext();

        cities = context.Cities
            .Where(city => city.Id != 0);

        city = cities!.FirstOrDefault(m => m.Id == cityId);

        privateFacilities = context.PrivateFacilities
            .Include(facility => facility.PrivateFacilityLicenses)
            .Include(facility => facility.Type)
            .Where(facility => facility.CityId == cityId);
    }

    private void SelectCity()
    {
        city = cities!.FirstOrDefault(m => m.Id == cityId);

        privateFacilities = context.PrivateFacilities
            .Include(facility => facility.PrivateFacilityLicenses)
            .Include(facility => facility.Type)
            .Where(facility => facility.CityId == cityId);

        pagination.TotalItemCountChanged += (sender, eventArgs) => StateHasChanged();
    }

    private PaginationState pagination = new PaginationState { ItemsPerPage = 5 };

    private async Task GoToPageAsync(int pageIndex)
    {
        await pagination.SetCurrentPageIndexAsync(pageIndex);
    }

    private string? PageButtonClass(int pageIndex)
        => pagination.CurrentPageIndex == pageIndex ? "current" : null;

    private string? AriaCurrentValue(int pageIndex)
        => pagination.CurrentPageIndex == pageIndex ? "page" : null;
}
