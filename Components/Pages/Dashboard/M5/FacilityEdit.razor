@page "/Dashboard/M5/Edit/{Id:guid}"

@rendermode InteractiveServer

@layout _Layout

<PageTitle>ویرایش باشگاه @Facility?.Name @Facility?.City!.PersianName</PageTitle>

<div class="page-top-menu">
    <h6 class="panel-title">باشگاه @Facility?.Name @Facility?.City!.PersianName</h6>
</div>

<AuthorizeView Roles="Administrators" Context="authContext">
    <Authorized>
        <div class="row form-wrapper">
            <div class="col3-5 mb-0">
                <div class="instructions">
                    <p class="mb-3">دوره ها و کلاس های آموزشی ضمن خدمت با اطلاعات ذیل در سامانه آماری اداره کل ورزش و جوانان استان گیلان ثبت می گردد.</p>
                    <div class="instruction-item">
                        <div class="icon-title mb-2">
                            <img src="/icons/title-blue.svg">
                            <h6>عنوان دوره:</h6>
                        </div>
                        <p>در فرم مربوطه بخش اول اطلاعات عنوان دوره آموزشی مورد نظر است.</p>
                        <p>در این بخش عنوان دوره، نوع دوره بین عمومی یا تخصصی (شغلی) و نحوه برگزاری دوره از نظر مجازی یا حضوری قابل ویرایش می باشد.</p>
                    </div>
                </div>
            </div>
            <div class="col2-5 mb-auto">
                @if (Facility is null)
                {
                    <Loading CardMode=true />
                }
                else
                {
                    <div class="card p-3">
                        <EditForm method="post" Model="Facility" OnValidSubmit="UpdateFacility" FormName="edit" Enhance>
                            <DataAnnotationsValidator />
                            <ValidationSummary role="alert" />
                            <input type="hidden" name="Facility.Id" value="@Facility.Id" />
                            <div class="form-group fa mb-3">
                                <label for="title" class="form-label">
                                    <img src="/icons/title.svg" />
                                </label>
                                <InputText id="title" @bind-Value="Facility.Name" class="form-control" placeholder="عنوان باشگاه" />
                            </div>
                            <div class="form-group fa mb-3">
                                <label for="typeid" class="form-label">
                                    <img src="/icons/genders.svg" />
                                </label>
                                <InputSelect id="typeid" class="select form-control" @bind-Value="Facility.TypeId">
                                    @if (Types is not null)
                                    {
                                        foreach (FacilityType type in Types)
                                        {
                                            <option value="@type.Id">@type.PersianTitle</option>
                                        }
                                    }
                                </InputSelect>
                            </div>
                            <div class="form-row">
                                <div class="form-group fa mb-3">
                                    <label for="cityid" class="form-label">
                                        <img src="/icons/genders.svg" />
                                    </label>
                                    <InputSelect id="cityid" class="select form-control" @bind-Value="Facility.CityId">
                                        @if (Cities is not null)
                                        {
                                            foreach (City city in Cities)
                                            {
                                                <option value="@city.Id">@city.PersianName</option>
                                            }
                                        }
                                    </InputSelect>
                                </div>
                                <div class="form-group fa mb-3">
                                    <label for="district" class="form-label">
                                        <img src="/icons/title.svg" />
                                    </label>
                                    <InputText id="district" @bind-Value="Facility.District" class="form-control" placeholder="بخش" />
                                </div>
                            </div>
                            @*                 <div class="mb-3">
                                <label for="isrural" class="form-label">IsRural:</label>
                                <InputCheckbox id="isrural" @bind-Value="Facility.IsRural" class="form-check-input" />
                                <ValidationMessage For="() => Facility.IsRural" class="text-danger" />
                            </div> *@
                            <div class="mb-3">
                                <label for="area" class="form-label">Area:</label>
                                <InputNumber id="area" @bind-Value="Facility.Area" class="form-control" />
                                <ValidationMessage For="() => Facility.Area" class="text-danger" />
                            </div>
                            <div class="mb-3">
                                <label for="sporthallarea" class="form-label">SportHallArea:</label>
                                <InputNumber id="sporthallarea" @bind-Value="Facility.SportHallArea" class="form-control" />
                                <ValidationMessage For="() => Facility.SportHallArea" class="text-danger" />
                            </div>
                            <div class="mb-3">
                                <label for="sportlandarea" class="form-label">SportLandArea:</label>
                                <InputNumber id="sportlandarea" @bind-Value="Facility.SportLandArea" class="form-control" />
                                <ValidationMessage For="() => Facility.SportLandArea" class="text-danger" />
                            </div>
                            <div class="mb-3">
                                <label for="isactive" class="form-label">IsActive:</label>
                                <InputCheckbox id="isactive" @bind-Value="Facility.IsActive" class="form-check-input" />
                                <ValidationMessage For="() => Facility.IsActive" class="text-danger" />
                            </div>
                            <div class="mb-3">
                                <label for="zipcode" class="form-label">ZipCode:</label>
                                <InputText id="zipcode" @bind-Value="Facility.ZipCode" class="form-control" />
                                <ValidationMessage For="() => Facility.ZipCode" class="text-danger" />
                            </div>
                            <div class="mb-3">
                                <label for="address" class="form-label">Address:</label>
                                <InputText id="address" @bind-Value="Facility.Address" class="form-control" />
                                <ValidationMessage For="() => Facility.Address" class="text-danger" />
                            </div>
                            <div class="mb-3">
                                <label for="phone" class="form-label">Phone:</label>
                                <InputText id="phone" @bind-Value="Facility.Phone" class="form-control" />
                                <ValidationMessage For="() => Facility.Phone" class="text-danger" />
                            </div>
                            <button type="submit" class="btn btn-primary">Save</button>
                        </EditForm>
                    </div>
                }
            </div>
        </div>
    </Authorized>
</AuthorizeView>

@code {
    [Parameter]
    public Guid Id { get; set; }

    [SupplyParameterFromForm]
    private PrivateFacility? Facility { get; set; }

    private AppDbContext? context { get; set; } = null!;

    private List<FacilityType>? Types;
    private List<City>? Cities;

    protected override async Task OnInitializedAsync()
    {
        Facility = null;

        context = DbFactory.CreateDbContext();

        Types = await context.FacilityTypes.ToListAsync();
        
        Cities = await context.Cities
            .Where(city => city.Id != 0)
            .ToListAsync();

        Facility = await context.PrivateFacilities
            .Include(facility => facility.City)
            .FirstOrDefaultAsync(facility => facility.Id == Id);
    }

    private async Task UpdateFacility()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(Facility!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!FacilityExists(Facility!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/privatefacilities");
    }

    private bool FacilityExists(Guid id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.PrivateFacilities.Any(e => e.Id == id);
    }
}
