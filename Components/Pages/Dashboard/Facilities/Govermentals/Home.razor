@using Microsoft.AspNetCore.Components.QuickGrid

@page "/Dashboard/Facilities/Govermentals"

@rendermode InteractiveServer

<PageTitle>اماکن ورزشی وزارت ورزش و جوانان</PageTitle>

<AuthorizeView Roles="Administrators" Context="authContext">
	<Authorized>
		<div class="row">
			<div class="col1-1">
				<div class="card facilities-list-card">
					<div class="card-header border-bottom">
						<h6 class="title">فهرست اماکن ورزشی سایر ارگان های دولتی شهرستان @City?.PersianName</h6>
						<InputSelect class="select" @bind-Value="CityId" @bind-Value:after="UpdateList">
							@foreach (City city in Cities!)
							{
								<option value="@city.Id">@city.PersianName</option>
							}
						</InputSelect>
					</div>
					@if (Facilities is null)
					{
						<Loading CardMode=true />
					}
					else
					{
						<div class="card-body">
							<div class="facilities-list">
								@if (Facilities is not null)
								{
									<QuickGrid Items="Facilities.AsQueryable()" Pagination="pagination" Theme="" Class="facilities-table">
										<PropertyColumn Title="عنوان مکان ورزشی" Property="@(facility => facility.Name)" />
										<PropertyColumn Title="مالک دولتی" Property="@(facility => facility.Owner)" />
										<PropertyColumn Title="نوع مکان" Property="@(facility => facility.TypeId != null ? facility.Type!.PersianTitle : string.Empty)" />
										<PropertyColumn Title="موقعیت جغرافیایی" Property="@(facility => facility.IsRural == true ? "روستایی" : "شهری")" />
										<PropertyColumn Title="وضعیت فعالیت" Property="@(facility => facility.IsActive == true ? "فعال" : "غیرفعال")" />
										<TemplateColumn>
											<a class="edit-link" href="/Dashboard/Facilities/Edit/@context.Id">
												<img src="/icons/square-edit.svg" />
											</a>
										</TemplateColumn>
									</QuickGrid>
								}
							</div>
						</div>
						<div class="card-footer pt-0">
							<div class="paginator border-top pt-3">
								<nav role="navigation">
									@if (pagination.TotalItemCount.HasValue)
									{
										for (var pageIndex = 0; pageIndex <= pagination.LastPageIndex; pageIndex++)
										{
											var capturedIndex = pageIndex;
											<button @onclick="@(() => GoToPageAsync(capturedIndex))"
													class="btn @PageButtonClass(capturedIndex)"
													aria-current="@AriaCurrentValue(capturedIndex)"
													aria-label="@(pageIndex + 1)">
												@(pageIndex + 1)
											</button>
										}
									}
								</nav>
								<div class="total">
									@string.Format("{0} مکان", pagination.TotalItemCount)
								</div>
							</div>
						</div>

					}
				</div>
			</div>
		</div>
	</Authorized>
</AuthorizeView>

@code {
	private AppDbContext context = default!;

	private int CityId = 1;

	private City? City;

	private IQueryable<City>? Cities;

	private List<GovernmentFacility>? Facilities { get; set; }

	protected override async Task OnInitializedAsync()
	{
		context = DbFactory.CreateDbContext();

		Cities = context.Cities
			.Where(city => city.Id != 0);

		await UpdateList();
	}

	private async Task UpdateList()
	{
		Facilities = null;

		context = DbFactory.CreateDbContext();

		City = Cities!.FirstOrDefault(c => c.Id == CityId);

		Facilities = await context.GovernmentFacilities
			.Include(facility => facility.Type)
			.Include(facility => facility.GovernmentFacilityLicenses)
			.Where(facility => facility.City!.Id == CityId)
			.ToListAsync();

		await pagination.SetCurrentPageIndexAsync(0);
		pagination.TotalItemCountChanged += (sender, eventArgs) => StateHasChanged();

		StateHasChanged();
	}

	private PaginationState pagination = new PaginationState { ItemsPerPage = 10 };

	private async Task GoToPageAsync(int pageIndex)
	{
		await pagination.SetCurrentPageIndexAsync(pageIndex);
	}

	private string? PageButtonClass(int pageIndex)
		=> pagination.CurrentPageIndex == pageIndex ? "current" : null;

	private string? AriaCurrentValue(int pageIndex)
		=> pagination.CurrentPageIndex == pageIndex ? "page" : null;
}
