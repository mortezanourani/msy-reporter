@using Microsoft.AspNetCore.Components.QuickGrid

@page "/Dashboard/HumanResource"

@rendermode InteractiveServer

<PageTitle>شناسنامه آموزشی</PageTitle>

<AuthorizeView Roles="Administrators" Context="authContext">
	<Authorized>
		<div class="page-top-menu">
			<div class="paginator-search form-group fa">
				<label class="form-label" for="paginator-search-input">
					<img src="/icons/search-gray.svg" />
				</label>
				<InputText class="form-control" placeholder="جستجوی پرسنل بر اساس نام یا کد ملی" @bind-Value="searchText" @oninput="Search"></InputText>
			</div>
		</div>
		<div class="row">
			<div class="col1-1">
				<div class="card employees-list-card">
					@if (Employees is null)
					{
						<Loading CardMode=true />
					}
					else
					{
						<div class="card-header border-bottom">
							<h6 class="title">فهرست پرسنل</h6>
							<div class="paginator">
								<nav role="navigation">
									@if (pagination.TotalItemCount.HasValue)
									{
										var totalPages = pagination.TotalItemCount;
										var pageIndex = pagination.CurrentPageIndex;
										var currentPage = pageIndex + 1;
										var lastPage = pagination.LastPageIndex + 1;
										var firstItemNumber = 1 + (pagination.ItemsPerPage * pagination.CurrentPageIndex);
										var lastItemNumber = pagination.ItemsPerPage * (pagination.CurrentPageIndex + 1);
										<button @onclick="@(() => GoToPageAsync(pageIndex - 1))"
										class="btn"
										aria-current="@AriaCurrentValue(pageIndex - 1)"
										aria-label="@(pageIndex - 1)"
										disabled=@((pageIndex <= 0) ? "disabled" : false)>
											<span class="material-symbols-rounded">chevron_right</span>
										</button>
										<div class="total">@string.Format("صفحه {0} از {1}", currentPage, lastPage)</div>
										<button @onclick="@(() => GoToPageAsync(pageIndex + 1))"
										class="btn"
										aria-current="@AriaCurrentValue(pageIndex + 1)"
										aria-label="@(pageIndex + 1)"
										disabled=@((currentPage >= lastPage) ? "disabled" : false)>
											<span class="material-symbols-rounded">chevron_left</span>
										</button>
									}
								</nav>
							</div>
						</div>
						<div class="card-body">
							<div class="employees-list">
								@if (Employees is not null)
								{
									<QuickGrid Items="Employees.AsQueryable()" Pagination="pagination" Theme="" Class="employees-table">
										<PropertyColumn Title="نام و نام خانوادگی" Property="@(employee => $"{employee.FirstName} {employee.LastName}")" />
										<PropertyColumn Title="کد ملی" Property="@(employee => employee.SeenCode)" />
										<PropertyColumn Title="نام پدر" Property="@(employee => employee.FatherName)" />
										<PropertyColumn Title="تاریخ تولد" Property="@(employee => employee.BirthDate!)" />
										<PropertyColumn Title="نوع قرارداد" Property="@(employee => employee.Type!.PersianTitle)" />
										<PropertyColumn Title="کد پرسنلی" Property="@(employee => employee.PersonnelId)" />
										<TemplateColumn>
											<a class="edit-link" href="/Dashboard/HumanResource/Employees/Edit/@context.Id">
												<img src="/icons/user-edit.svg" />
											</a>
											<a class="edit-link" href="/Dashboard/Employee/Courses/@context.AccountId">
												<img src="/icons/user-courses.svg" />
											</a>
										</TemplateColumn>
									</QuickGrid>
								}
							</div>
						</div>
					}
				</div>
			</div>
		</div>
	</Authorized>
</AuthorizeView>

@code {
	private AppDbContext context = default!;

	private List<Employee>? Employees;

	private string? searchText;

	protected override async Task OnInitializedAsync()
	{
		Employees = null;

		context = DbFactory.CreateDbContext();

		Employees ??= await context.Employees
			.Include(employee => employee.Type)
			.OrderBy(employee => employee.FirstName)
			.OrderBy(employee => employee.LastName)
			.ToListAsync();

		pagination.TotalItemCountChanged += (sender, eventArgs) => StateHasChanged();
	}

	private async Task Search(ChangeEventArgs args)
	{
		searchText = args.Value!.ToString();
		Employees = string.IsNullOrEmpty(searchText)
			? await context.Employees
				.Include(employee => employee.Type)
				.OrderBy(employee => employee.FirstName)
				.OrderBy(employee => employee.LastName)
				.ToListAsync()
			: await context.Employees
				.Include(employee => employee.Type)
				.Where(employee => 
					employee.LastName.Contains(searchText)
					||
					employee.FirstName.Contains(searchText)
					||
					employee.SeenCode.Contains(searchText))
				.OrderBy(employee => employee.FirstName)
				.OrderBy(employee => employee.LastName)
				.ToListAsync();
	}
	
	private PaginationState pagination = new PaginationState { ItemsPerPage = 10 };

	private async Task GoToPageAsync(int pageIndex)
	{
		await pagination.SetCurrentPageIndexAsync(pageIndex);
	}

	private string? AriaCurrentValue(int pageIndex)
		=> pagination.CurrentPageIndex == pageIndex ? "page" : null;
}
