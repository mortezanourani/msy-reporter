@using Microsoft.AspNetCore.Components.QuickGrid

@rendermode InteractiveServer

<PageTitle>برنامه ریزی آموزش کارکنان</PageTitle>

@if (Years is null)
{
	<Loading CardMode=true />
}
else
{
	<div class="row">
		<div class="col1-1">
			<div class="card courses-card">
				<div class="card-header border-bottom">
					<h6 class="title">دوره های برگزار شده در سال @Year</h6>
					<InputSelect class="select" @bind-Value="Year" @bind-Value:after="OnParametersSetAsync">
						@foreach (string year in Years!)
						{
							<option value="@year">@year</option>
						}
					</InputSelect>
				</div>

				<div class="card-body">
					<div class="courses-list">
						@if (Courses is not null)
						{
							<QuickGrid Items="Courses.AsQueryable()" Pagination="pagination" Theme="" Class="courses-table">
								<PropertyColumn Title="عنوان دوره" Property="@(course => course.Title)" />
								<PropertyColumn Title="ساعت دوره" Property="@(course => course.CourseTime)" />
								<PropertyColumn Title="زمان برگزاری دوره" Property="@(course => string.Format("{0:0000}/{1:00}", course.Year, course.Month))" />
								<PropertyColumn Title="نوع دوره" Property="@(course => course.IsGeneral ? "عمومی" : "تخصصی")" />
								<PropertyColumn Title="نوع برگزاری دوره" Property="@(course => course.IsOnline ? "مجازی" : "حضوری")" />
								<TemplateColumn>
									<a class="edit-link" href="/Dashboard/HumanResource/Education/Courses/Employees/Edit/@context.Id">
										<img src="/icons/course-users.svg" />
									</a>
									<a class="edit-link" href="/Dashboard/HumanResource/Education/Courses/Edit/@context.Id">
										<img src="/icons/course-edit.svg" />
									</a>
								</TemplateColumn>
							</QuickGrid>
						}
					</div>
				</div>

				<div class="card-footer px-0">
					<div class="paginator">
						<nav role="navigation">
							@if (pagination.TotalItemCount.HasValue)
							{
								var totalPages = pagination.TotalItemCount;
								var pageIndex = pagination.CurrentPageIndex;
								var currentPage = pageIndex + 1;
								var lastPage = pagination.LastPageIndex + 1;
								var firstItemNumber = 1 + (pagination.ItemsPerPage * pagination.CurrentPageIndex);
								var lastItemNumber = pagination.ItemsPerPage * (pagination.CurrentPageIndex + 1);
								<div class="total">@string.Format("صفحه {0} از {1}", currentPage, lastPage)</div>
								<span class="buttons-wrapper">
									<button @onclick="@(() => GoToPageAsync(pageIndex - 1))"
											class="btn"
											aria-current="@AriaCurrentValue(pageIndex - 1)"
											aria-label="@(pageIndex - 1)"
											disabled=@((pageIndex <= 0) ? "disabled" : false)>
										<span class="material-symbols-rounded">chevron_right</span>
									</button>
									<button @onclick="@(() => GoToPageAsync(pageIndex + 1))"
											class="btn"
											aria-current="@AriaCurrentValue(pageIndex + 1)"
											aria-label="@(pageIndex + 1)"
											disabled=@((currentPage >= lastPage) ? "disabled" : false)>
										<span class="material-symbols-rounded">chevron_left</span>
									</button>
								</span>
							}
						</nav>
					</div>
				</div>
			</div>
		</div>
	</div>
}

@code {
	[Parameter]
	public string? Year { get; set; }

	private List<string> Years;
	private List<Course>? Courses;

	protected override async Task OnInitializedAsync()
	{
		using var context = DbFactory.CreateDbContext();

		Years = await context.Courses
			.GroupBy(course => course.Year)
				.OrderByDescending(group => group.Key)
				.Select(group => group.Key)
			.ToListAsync();

		Year = Years.FirstOrDefault();
	}

	protected override async Task OnParametersSetAsync()
	{
		using var context = DbFactory.CreateDbContext();

		Courses = await context.Courses
			.Where(course => course.Year.Contains(Year!))
			.OrderBy(course => course.Title)
			.ToListAsync();

		pagination.TotalItemCountChanged += (sender, eventArgs) => StateHasChanged();
	}

	private PaginationState pagination = new PaginationState { ItemsPerPage = 10 };

	private async Task GoToPageAsync(int pageIndex)
	{
		await pagination.SetCurrentPageIndexAsync(pageIndex);
	}

	private string? AriaCurrentValue(int pageIndex)
		=> pagination.CurrentPageIndex == pageIndex ? "page" : null;
}
