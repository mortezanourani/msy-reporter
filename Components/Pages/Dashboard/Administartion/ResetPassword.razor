@page "/Dashboard/Administration/ResetPassword/{EmployeeId:guid}"

@using Reporter.Components.Layout
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using Reporter.Data

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityRedirectManager RedirectManager
@inject ILogger<ChangePassword> Logger
@inject IdentityUserAccessor UserAccessor

@layout _Layout

@rendermode InteractiveServer

<PageTitle>پنل مدیریت</PageTitle>

<div class="page-top-menu">
    <h6 class="panel-title">تغییر رمزعبور کاربر</h6>
</div>

<div class="row form-wrapper">
    <div class="col3-5 mb-0">
        <div class="instructions">
            <p class="mb-3">جهت تغییر رمز عبور خود، می بایست رمز عبور کنونی خود را بدانید. اگر رمز عبور فعلی خود را به یاد نمی آورید لطفا به مدیریت سامانه اطلاع دهید تا نسبت به تعریف رمز عبور جدید (موقت) برای شما اقدام نمایند.</p>
            <div class="instruction-item">
                <div class="icon-title mb-2">
                    <img src="/icons/fingerprint-blue.svg">
                    <h6>رمز عبور جدید:</h6>
                </div>
                <p>در فرم مربوطه فیلد اول رمز عبور جدیدی است که می خواهید برای حساب کاربری خود تعیین نمایید.</p>
                <p>جهت اطمینان از اینکه رمز عبور خود را درست وارد نموده اید می بایست رمز عبور جدید خود را در فیلد دوم مجددا وارد نمایید. بدیهی است که در صورت مغایرت این دو، رمز عبور تغییر نخواهد کرد.</p>
            </div>
        </div>
    </div>
    <div class="col2-5 mb-auto">
        @if (Employee is null)
        {
            <Loading CardMode=true />
        }
        else
        {
            <div class="card p-3">
                <EditForm Model="Input" FormName="change-password" OnValidSubmit="ResetPass" method="post">
                    <div class="form-group fa mb-3">
                        <label for="accountid" class="form-label">
                            <img src="/icons/user.svg" />
                        </label>
                        <div class="form-control">
                            @Employee.FirstName @Employee.LastName
                        </div>
                    </div>
                    <hr />
                    <div class="form-group mb-3">
                        <label for="new-password" class="form-label">
                            <img src="/icons/fingerprint.svg" />
                        </label>
                        <InputText type="password" @bind-Value="Input.NewPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="رمز عبور جدید" dir="ltr" />
                    </div>
                    <div class="form-group mb-3">
                        <InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="تکرار رمز عبور جدید" dir="ltr" />
                        <label for="confirm-password" class="form-label">
                            <img src="/icons/fingerprint.svg" />
                        </label>
                    </div>
                    <DataAnnotationsValidator />
                    <ValidationSummary class="text-danger" role="alert" />
                    @if (!string.IsNullOrEmpty(statusMessage))
                    {
                        <div class="alert alert-@statusMessageClass" role="alert">
                            @statusMessage
                        </div>
                    }
                    <button type="submit" class="w-100 btn btn-lg btn-primary">تایید</button>
                </EditForm>
            </div>
        }
    </div>
</div>

@code {
    [Parameter]
    public Guid? EmployeeId { get; set; }

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    private Employee? Employee;

    private string? statusMessage;
    private string? statusMessageClass;

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();

        Employee = await context.Employees
            .Where(employee => employee.Id == EmployeeId!)
            .FirstOrDefaultAsync();

        if (Employee is null)
        {
            NavigationManager.NavigateTo("/NotFound");
        }
    }

    private async Task ResetPass()
    {

        ApplicationUser? user = await UserManager.FindByIdAsync(Employee!.AccountId!);

        if (user is null)
        {
            NavigationManager.NavigateTo("/notfound");
        }

        string resetPasswordToken = await UserManager.GeneratePasswordResetTokenAsync(user!);
        var res = await UserManager.ResetPasswordAsync(user!, resetPasswordToken, Input.NewPassword);

        if (res.Succeeded)
        {
            statusMessageClass = "success";
            statusMessage = "تغییر رمزعبور با موفقیت انجام شد.";
        }
        else
        {
            statusMessageClass = "danger";
            foreach (var error in res.Errors)
            {
                statusMessage += $"{error.Description}\n";
            }
        }
        return;
    }

    private sealed class InputModel
    {
        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        public string NewPassword { get; set; } = "";

        [DataType(DataType.Password)]
        [Compare("NewPassword", ErrorMessage = "The new password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";
    }
}
