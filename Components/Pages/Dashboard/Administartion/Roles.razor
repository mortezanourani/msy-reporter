@page "/Dashboard/Administration/Roles"

@using Microsoft.AspNetCore.Components.QuickGrid

@layout _Layout

@rendermode InteractiveServer

<PageTitle>پنل مدیریت</PageTitle>

<div class="page-top-menu">
    <h6 class="panel-title">ثبت و ویرایش سمت ها</h6>
</div>
<div class="row form-wrapper">
    <div class="col3-5 mb-0">
        <div class="instructions">
            <p class="mb-0">در فرم مقابل آمار ورزشکاران سازمان یافته بر اساس هر هیات در هر شهرستان مربوط به ماه مشخصی ثبت می شوند.</p>
            <p class="mb-3">بدیهی است که آمار مربوطه معادل تعداد ورزشکاران آقا و خانم بیمه شده از ابتدای ماه تا انتهای همان خواهد بود.</p>
            <div class="instruction-item">
                <div class="icon-title mb-2">
                    <img src="/icons/calendar-blue.svg">
                    <h6>ماه و سال:</h6>
                </div>
                <p>ماه و سال مربوط به آماری که قصد ثبت آن را دارید از دو منوی کشویی در فرم مقابل قابل تنظیم هستند.</p>
                <p>لازم به ذکر است که با توجه به اینکه آمار باید به صورت ماهیانه ثبت گردد لذا دسترسی در بخش سال تنها برای سال جاری و سال گذشته امکان پذیر است.</p>
            </div>
        </div>
    </div>
    <div class="col2-5 mb-auto">
        @if (IdentityRoles is null)
        {
            <Loading CardMode=true />
        }
        else
        {
            <div class="card p-3 mb-3">
                <EditForm method="post" Model="Role" OnValidSubmit="AddRole" FormName="edit" Enhance>
                    <DataAnnotationsValidator />
                    <div class="form-group en mb-3">
                        <label for="rolename" class="form-label">
                            <img src="/icons/username.svg" />
                        </label>
                        <InputText id="rolename" @bind-Value="Role!.Name" class="form-control" placeholder="Role Name" />
                    </div>
                    <ValidationSummary class="text-danger" role="alert" />
                    @if (!string.IsNullOrEmpty(statusMessage))
                    {
                        <div class="alert alert-@statusMessageClass" role="alert">
                            @statusMessage
                        </div>
                    }
                    <button type="submit" class="btn btn-primary w-100">ثبت</button>
                </EditForm>
            </div>
        }
        <div class="card list-card">
            <div class="card-header border-bottom">
                <h6 class="title">سابقه تصدی هیات</h6>
                <div class="paginator">
                    <nav role="navigation">
                        @if (pagination.TotalItemCount.HasValue)
                        {
                            var totalPages = pagination.TotalItemCount;
                            var pageIndex = pagination.CurrentPageIndex;
                            var currentPage = pageIndex + 1;
                            var lastPage = pagination.LastPageIndex + 1;
                            var firstItemNumber = 1 + (pagination.ItemsPerPage * pagination.CurrentPageIndex);
                            var lastItemNumber = pagination.ItemsPerPage * (pagination.CurrentPageIndex + 1);
                            <button @onclick="@(() => GoToPageAsync(pageIndex + 1))"
                                    class="btn"
                                    aria-current="@AriaCurrentValue(pageIndex + 1)"
                                    aria-label="@(pageIndex + 1)"
                                    disabled=@((currentPage >= lastPage) ? "disabled" : false)>
                                <img src="/icons/arrow-left.svg" />
                            </button>
                            <div class="total">@string.Format("صفحه {0} از {1}", currentPage, lastPage)</div>
                            <button @onclick="@(() => GoToPageAsync(pageIndex - 1))"
                                    class="btn"
                                    aria-current="@AriaCurrentValue(pageIndex - 1)"
                                    aria-label="@(pageIndex - 1)"
                                    disabled=@((pageIndex <= 0) ? "disabled" : false)>
                                <img src="/icons/arrow-right.svg" />
                            </button>
                        }
                    </nav>
                </div>
            </div>
            <div class="card-body">
                <div class="table-wrapper">
                    @if (IdentityRoles is not null)
                    {
                        <QuickGrid Items="IdentityRoles.AsQueryable()" Pagination="pagination" Theme="" Class="quickgrid-table">
                            <PropertyColumn Title="عنوان" Property="@(president => president.Name)" />
                            <TemplateColumn>
                                <button class="btn p-0">
                                    <img src="/icons/user-remove.svg" />
                                </button>
                            </TemplateColumn>
                        </QuickGrid>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public Guid? Id { get; set; }

    [SupplyParameterFromForm]
    private IdentityRole? Role { get; set; } = new();

    private List<IdentityRole>? IdentityRoles;

    private AppDbContext? context { get; set; } = null!;

    private string? statusMessage;
    private string? statusMessageClass = "success";

    protected override async Task OnInitializedAsync()
    {
        context = DbFactory.CreateDbContext();

        IdentityRoles = await RoleManager.Roles
            .OrderBy(role => role.Name)
            .ToListAsync();

        pagination.TotalItemCountChanged += (sender, eventArgs) => StateHasChanged();
    }

    private async Task AddRole()
    {
        return;
    }

    private PaginationState pagination = new PaginationState { ItemsPerPage = 10 };

    private async Task GoToPageAsync(int pageIndex)
    {
        await pagination.SetCurrentPageIndexAsync(pageIndex);
    }

    private string? AriaCurrentValue(int pageIndex)
        => pagination.CurrentPageIndex == pageIndex ? "page" : null;
}
