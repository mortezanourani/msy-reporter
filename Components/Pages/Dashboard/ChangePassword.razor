@page "/Dashboard/ChangePassword"

@using Reporter.Components.Layout
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using Reporter.Data

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityRedirectManager RedirectManager
@inject ILogger<ChangePassword> Logger
@inject IdentityUserAccessor UserAccessor

<PageTitle>تغییر رمز عبور</PageTitle>

<div class="">
    <h6>تغییر رمز عبور</h6>
    <div class="row changepassword">
        <div class="col3-5 instructions-wrapper">
            <p class="mb-3">جهت تغییر رمز عبور خود، می بایست رمز عبور کنونی خود را بدانید. اگر رمز عبور فعلی خود را به یاد نمی آورید لطفا به مدیریت سامانه اطلاع دهید تا نسبت به تعریف رمز عبور جدید (موقت) برای شما اقدام نمایند.</p>
            <div class="instruction-item">
                <div class="icon-title mb-2">
                    <img src="/icons/fingerprint-blue.svg">
                    <h6>رمز عبور فعلی و جدید:</h6>
                </div>
                <p>در فرم مربوطه فیلد اول رمز عبور جدیدی است که می خواهید برای حساب کاربری خود تعیین نمایید.</p>
                <p>جهت اطمینان از اینکه رمز عبور خود را درست وارد نموده اید می بایست رمز عبور جدید خود را در فیلد دوم مجددا وارد نمایید. بدیهی است که در صورت مغایرت این دو، رمز عبور تغییر نخواهد کرد.</p>
                <p>فیلد سوم رمز عبور فعلی شماست که به جهت اطمینان از اینکه اقدام به تغییر رمز عبور توسط صاحب این حساب کاربری صورت می پذیرد الزامی می باشد.</p>
            </div>
            <StatusMessage Message="@message" />
        </div>
        <div class="col2-5 form-wrapper">
            <div class="card p-3">
                <EditForm Model="Input" FormName="change-password" OnValidSubmit="OnValidSubmitAsync" method="post">
                    <DataAnnotationsValidator />
                    <div class="form-group mb-3">
                        <label for="new-password" class="form-label">
                            <img src="/icons/fingerprint.svg" />
                        </label>
                        <InputText type="password" @bind-Value="Input.NewPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="رمز عبور جدید" dir="ltr" />
                    </div>
                    <div class="form-group mb-3">
                        <InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="تکرار رمز عبور جدید" dir="ltr" />
                        <label for="confirm-password" class="form-label">
                            <img src="/icons/fingerprint.svg" />
                        </label>
                    </div>
                    <hr />
                    <div class="form-group mb-3">
                        <label for="old-password" class="form-label">
                            <img src="/icons/fingerprint.svg" />
                        </label>
                        <InputText type="password" @bind-Value="Input.OldPassword" class="form-control" autocomplete="current-password" aria-required="true" placeholder="رمز عبور کنونی" dir="ltr" />
                    </div>
                    <button type="submit" class="w-100 btn btn-lg btn-primary">به روز رسانی</button>
                    <ValidationSummary class="text-danger" role="alert" />
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {
    [CascadingParameter]
    private ApplicationUser user { get; set; } = default!;

    private string? message;
    private bool hasPassword;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        hasPassword = await UserManager.HasPasswordAsync(user);
        if (!hasPassword)
        {
            RedirectManager.RedirectTo("Account/Manage/SetPassword");
        }
    }

    private async Task OnValidSubmitAsync()
    {
        var changePasswordResult = await UserManager.ChangePasswordAsync(user, Input.OldPassword, Input.NewPassword);
        if (!changePasswordResult.Succeeded)
        {
            message = $"Error: {string.Join(",", changePasswordResult.Errors.Select(error => error.Description))}";
            return;
        }

        await SignInManager.RefreshSignInAsync(user);
        Logger.LogInformation("User changed their password successfully.");

        RedirectManager.RedirectToCurrentPageWithStatus("Your password has been changed", HttpContext);
    }

    private sealed class InputModel
    {
        [Required]
        [DataType(DataType.Password)]
        [Display(Name = "Current password")]
        public string OldPassword { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "New password")]
        public string NewPassword { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm new password")]
        [Compare("NewPassword", ErrorMessage = "The new password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";
    }
}
