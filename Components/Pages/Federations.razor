@page "/Federations"

@implements IAsyncDisposable

@using Microsoft.AspNetCore.Components.QuickGrid

<PageTitle>Federations</PageTitle>

<h2 class="page-title mb-3">هیات های ورزشی</h2>

<ProvinceFederationsStatusCard />

<div class="card city-federations-card">
	<div class="card-header">
		<h6 class="title">فهرست هیات های ورزشی @city!.PersianName</h6>
		<InputSelect class="select" @bind-Value="cityId" @onclick="SelectCity">
			@foreach (City city in cities!)
			{
				<option value="@city.Id">@city.PersianName</option>
			}
		</InputSelect>
	</div>
	<div class="card-body">
		<div class="federations-list">
			@if (federations.Any())
			{
				<QuickGrid Items="federations" Theme="" Class="federations-table">
					<PropertyColumn Sortable="true" Title="عنوان هیات" Property="@(federation => federation.Federation.PersianName)" />
					<PropertyColumn Sortable="true" Title="شهرستان" Property="@(federation => federation.City == null ? "استان" : federation.City.PersianName)" />
					<PropertyColumn Sortable="true" Title="شناسه ملی" Property="@(federation => federation.NationalId)" />
					<PropertyColumn Sortable="true" Title="رئیس / سرپرست" Property="@(federation => federation.FederationPresidents.FirstOrDefault().Name)" />
					<PropertyColumn Sortable="true" Title="نوع حکم" Property="@(federation => federation.FederationPresidents.FirstOrDefault().IsPresident ? "رئیس" : "سرپرست")" />
					<TemplateColumn>
						<a class="info-link" href="/Federation?Federation=@context.FederationId&City=@context.CityId">
							<span class="material-symbols-rounded">info</span>
						</a>
					</TemplateColumn>
				</QuickGrid>
			}
		</div>
	</div>
</div>

@code {
	private AppDbContext context = default!;

	private int cityId;

	private City? city;
	private List<City> cities = new List<City>();

	private IQueryable<CityFederation> federations;

	private int activesCount;
	private int presidentsCount;
	private int interimPresidentsCount;

	private IQueryable<FederationMeeting> federationMeetings;

	private int meetingsCount;
	private int generalMeetingsCount;
	private int electiveMeetingsCount;
	private int extraOrdinaryMeetingsCount;

	protected override void OnInitialized()
	{
		context = DbFactory.CreateDbContext();

		cities = context.Cities.ToList();

		federations = context.CityFederations;

		activesCount = federations!
			.Include(federation => federation.FederationPresidents)
			.Where(federation => federation.City.Id == 0)
			.Count(federation => federation.FederationPresidents.Count() > 0);

		presidentsCount = federations!
			.Include(federation => federation.FederationPresidents)
			.Where(federation => federation.City.Id == 0)
			.Count(federation => federation.FederationPresidents
				.Any(president => president.IsPresident));

		interimPresidentsCount = federations!
			.Include(federation => federation.FederationPresidents)
			.Where(federation => federation.City.Id == 0)
			.Count(federation => federation.FederationPresidents
				.Any(president => !president.IsPresident));

		federationMeetings = context.FederationMeetings
			.Include(meeting => meeting.Type)
			.Where(meeting => meeting.Year == 1403);

		meetingsCount = federationMeetings.Count();

		generalMeetingsCount = federationMeetings
			.Count(meeting => meeting.Type.Type == "General");

		electiveMeetingsCount = federationMeetings
			.Count(meeting => meeting.Type.Type == "Elective");

		extraOrdinaryMeetingsCount = federationMeetings
			.Count(meeting => meeting.Type.Type == "ExtraOrdinary");

		SelectCity();
	}

	private void SelectCity()
	{
		city = cities.FirstOrDefault(city => city.Id == cityId);

		federations = context.CityFederations
			.Include(federation => federation.City)
			.Include(federation => federation.FederationPresidents)
			.Where(federation => federation.City!.Id == cityId);
	}

	public async ValueTask DisposeAsync() => await context.DisposeAsync();
}
