@page "/SportsGroup/Champions"

@layout Layout.SportsGroupLayout

<PageTitle>ورزش قهرمانی</PageTitle>

<div class="row">
    <div class="col1-1">
        <div class="card color-card">
            <div class="card-header">
                <h6 class="title">ورزش قهرمانی در سال @year</h6>
                <InputSelect class="select" @bind-Value="year" @onclick="Update">
                    @foreach (int year in years)
                    {
                        <option value="@year">@year</option>
                    }
                </InputSelect>
            </div>
        </div>
    </div>
</div>

<YearChampionsSummaryCard Year="@year" />

<div class="row">
    <div class="col1-1">
        <div class="card empty-card">
            <div class="card-header px-0 pb-0">
                <h6 class="title">مدال آوران هیات @federation!.PersianName</h6>
                <InputSelect class="select" @bind-Value="federationId" @onclick="Update">
                    @foreach (Federation federation in federations)
                    {
                        <option value="@federation.Id">@federation.PersianName</option>
                    }
                </InputSelect>
            </div>
        </div>
    </div>
</div>

<FederationChampionsSummaryCard Year="@year" Federation="@federation" />

<div class="row">
    <div class="col1-1">
        <ChampionsApproachCard />
    </div>
</div>

@code {
    private AppDbContext context = default!;

    private int year;
    private List<int> years = new List<int>();

    private int federationId;
    private Federation? federation;
    private List<Federation> federations = new List<Federation>();

    protected override void OnInitialized()
    {
        context = DbFactory.CreateDbContext();

        years = context.Champions
            .Include(champion => champion.Tournament)
            .GroupBy(champion => champion.Tournament.Year)
                .Select(group => group.Key)
            .OrderByDescending(year => year)
            .ToList();

        year = years.FirstOrDefault();

        federationId = context.Federations
            .Include(federation => federation.Tournaments)
                .ThenInclude(tournament => tournament.Champions)
            .Where(federation => federation.Tournaments
                .Any(tournament =>
                    tournament.Year == year
                    &&
                    tournament.Champions.Count() > 0))
            .Where(federation => federation.IsChampionship)
            .OrderBy(federation => federation.PersianName)
            .ToList()
            .FirstOrDefault()!.Id;

        Update();
    }

    private void Update()
    {
        federations = context.Federations
            .Include(federation => federation.Tournaments)
                .ThenInclude(tournament => tournament.Champions)
            .Where(federation => federation.Tournaments
                .Any(tournament =>
                    tournament.Year == year
                    &&
                    tournament.Champions.Count() > 0))
            .Where(federation => federation.IsChampionship)
            .OrderBy(federation => federation.PersianName)
            .ToList();

        federation = 
            federations.FirstOrDefault(federation => federation.Id == federationId)
            ??
            federations.FirstOrDefault();

        federationId = federation.Id;
    }
}