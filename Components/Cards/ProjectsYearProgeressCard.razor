@inject IJSRuntime JSRuntime
@implements IAsyncDisposable

<div class="card">
    <div class="card-header">
        <h6 class="title">آمار مقایسه ای پروژه های عمرانی</h6>
    </div>
    <div class="card-body">
        <canvas id="lineChart"></canvas>
    </div>
    <div class="card-footer flex-row-reverse">
        <InputSelect class="select" @bind-Value="minYear" @onclick="UpdateChart">
            @foreach (int year in minYears!)
            {
                <option value="@year">@year</option>
            }
        </InputSelect>
        <InputSelect class="select" @bind-Value="maxYear" @onclick="UpdateChart">
            @foreach (int year in maxYears!)
            {
                <option value="@year">@year</option>
            }
        </InputSelect>
    </div>
</div>

<script>
    let chartInstance;

    function renderLineChart (labels, data) {
        const ctx = document.getElementById('lineChart').getContext('2d');
        chartInstance = new Chart(ctx, {
            type: 'line',
            data: {
                labels: labels,
                datasets: [{
                    label: 'مجموع اعتبارات مصوب',
                    data: data,
                    borderColor: 'blue',
                    backgroundColor: 'rgba(0, 123, 255, 0.3)',
                    fill: true
                }]
            },
            options: {
                responsive: true,
                plugins: {
                    legend: {
                        display: true,
                        labels: {
                            font: {
                                family: 'IRANSans',
                                size: 13,
                                weight: 500
                            }
                        }
                    },
                    tooltip: {
                        bodyFont: {
                            family: 'IRANSans',
                            size: 11,
                        },
                        titleFont: {
                            family: 'IRANSans',
                            size: 13,
                        }
                    }
                },
                scales: {
                    x: {
                        ticks: {
                            font: {
                                family: 'IRANSans',
                                size: 12
                            }
                        }
                    },
                    y: {
                        display: false,
                        ticks: {
                            font: {
                                family: 'IRANSans',
                                size: 12
                            }
                        }
                    }
                }
            }
        });
    }

    function updateChart (labels, data) {
        if (chartInstance) {
            chartInstance.data.labels = labels;
            chartInstance.data.datasets[0].data = data;
            chartInstance.update();
        }
    }
</script>

@code {
    private AppDbContext context = default!;

    private int minYear;
    private int maxYear;
    private List<int> minYears;
    private List<int> maxYears;

    private IQueryable<ProjectBudget> projectBudgets;
    private List<int> budgetYears;
    private List<int> totalApprovedBudgets;

    protected override void OnInitialized()
    {
        context = DbFactory.CreateDbContext();

        projectBudgets = context.ProjectBudgets
            .OrderBy(m => m.Year);

        minYear = projectBudgets.Min(m => m.Year);
        maxYear = projectBudgets.Max(m => m.Year);
 
        UpdateChart();
    }

    private async void UpdateChart()
    {
        minYears = projectBudgets
            .Where(m => m.Year < maxYear)
            .Select(m => m.Year)
            .ToList();

        maxYears = projectBudgets
            .Where(m => m.Year > minYear)
            .Select(m => m.Year)
            .ToList();
            
        var projectsBudgets = projectBudgets
            .Where(m => m.Year >= minYear && m.Year <= maxYear)
            .GroupBy(m => m.Year)
            .Select(g => new
            {
                Year = g.Key,
                TotalApprovedBugets = g.Sum(m => m.ApprovedBudgets)
            })
            .ToList();

        budgetYears = projectsBudgets
            .Select(m => m.Year)
            .ToList();

        totalApprovedBudgets = projectsBudgets
            .Select(m => m.TotalApprovedBugets)
            .ToList();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("renderLineChart", budgetYears, totalApprovedBudgets);
        }

        await JSRuntime.InvokeVoidAsync("updateChart", budgetYears, totalApprovedBudgets);
    }

    public async ValueTask DisposeAsync() => await context.DisposeAsync();
}