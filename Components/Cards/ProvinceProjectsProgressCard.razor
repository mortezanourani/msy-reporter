@inject IJSRuntime JSRuntime
@implements IAsyncDisposable

<div class="card">
    <div class="card-header">
        <h6 class="title">پروژه های عمرانی شهرستان ها در سال جاری</h6>
    </div>
    <div class="card-body">
        <canvas id="provinceProjectsProgressChart"></canvas>
    </div>
    <div class="card-footer legend">
        <div class="legend-row total">
            <h6>پروژه های عمرانی</h6>
        </div>
        <div class="legend-row unfinished">
            <h6>پروژه های عمرانی نیمه تمام</h6>
        </div>
        <div class="legend-row downTo70">
            <h6>پروژه های عمرانی نیمه تمام بالای 70</h6>
        </div>
    </div>
</div>

<script>
    let provinceProjectsProgressChart;

    function renderProvinceProjectsProgressChart (labels, data1, data2, data3) {
        const ctx = document.getElementById('provinceProjectsProgressChart').getContext('2d');
        provinceProjectsProgressChart = new Chart(ctx, {
            type: 'bar',
            data: {
                labels: labels,
                datasets: [{
                    label: 'پروژه های عمرانی',
                    data: data1,
                    backgroundColor: '#95bdf2',
                    order: 1,
                    fill: true
                },
                {
                    label: 'پروژه های عمرانی نیمه تمام',
                    data: data2,
                    backgroundColor: '#2e77ae',
                    order: 2,
                    fill: true
                },
                {
                    label: 'پروژه های عمرانی بالای 70 درصد',
                    data: data3,
                    backgroundColor: '#ff8e2b',
                    order: 3,
                    fill: true
                }]
            },
            options: {
                responsive: true,
                plugins: {
                    legend: {
                        display: false,
                        labels: {
                            font: {
                                family: 'IRANSans',
                                size: 13,
                                weight: 500
                            }
                        },
                        position: 'bottom'
                    },
                    tooltip: {
                        bodyFont: {
                            family: 'IRANSans',
                            size: 11,
                        },
                        titleFont: {
                            family: 'IRANSans',
                            size: 12,
                        }
                    }
                },
                scales: {
                    x: {
                        // stacked: true,
                        ticks: {
                            font: {
                                family: 'IRANSans',
                                size: 12,
                                weight: 600
                            }
                        }
                    },
                    y: {
                        stacked: false,
                        beginAtZero: true,
                        ticks: {
                            font: {
                                family: 'IRANSans',
                                size: 12
                            }
                        }
                    }
                }
            }
        });
    }

    function updateProvinceProjectsProgressChart (labels, data1, data2, data3) {
        if (provinceProjectsProgressChart) {
            provinceProjectsProgressChart.data.labels = labels;
            provinceProjectsProgressChart.data.datasets[0].data = data1;
            provinceProjectsProgressChart.data.datasets[1].data = data2;
            provinceProjectsProgressChart.data.datasets[2].data = data3;
            provinceProjectsProgressChart.update();
        }
    }
</script>

@code {
    private AppDbContext context = default!;

    private int year;

    private IQueryable<ConstructionProject> projects;
    private List<string> cities;
    private List<int> totalProjectsCount;
    private List<int> unfinishedProjectsCount;
    private List<int> downTo70ProjectsCount;

    protected override void OnInitialized()
    {
        context = DbFactory.CreateDbContext();

        projects = context.ConstructionProjects
            .Include(project => project.City)
            .Include(project => project.ProjectProgresses);

        UpdateChart();
    }

    private async void UpdateChart()
    {
        cities = projects
            .OrderBy(project => project.City)
            .GroupBy(project => project.City)
                .Select(group => group.Key.PersianName)
            .ToList();


        totalProjectsCount = projects
            .OrderBy(project => project.City)
            .GroupBy(project => project.City)
                .Select(group => group.Count())
            .ToList();
           
        unfinishedProjectsCount = projects
            .OrderBy(project => project.City)
            .GroupBy(project => project.City)
                .Select(group => group.Where(project => project.ProjectProgresses
                    .Max(progress => progress.Percentage) < 100 == true))
            .ToList()
            .Select(project => project.Count())
            .ToList();

        downTo70ProjectsCount = projects
            .OrderBy(project => project.City)
            .GroupBy(project => project.City)
            .Select(group => group.Where(project => 
                project.ProjectProgresses
                    .Max(progress => progress.Percentage) < 100 == true && 
                project.ProjectProgresses
                    .Max(progress => progress.Percentage) >= 70 == true))
            .ToList()
            .Select(project => project.Count())
            .ToList();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("renderProvinceProjectsProgressChart", cities, totalProjectsCount, unfinishedProjectsCount, downTo70ProjectsCount);
        }

        await JSRuntime.InvokeVoidAsync("updateProvinceProjectsProgressChart", cities, totalProjectsCount, unfinishedProjectsCount, downTo70ProjectsCount);
    }

    public async ValueTask DisposeAsync() => await context.DisposeAsync();
}