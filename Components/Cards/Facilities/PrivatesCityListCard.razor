@using Microsoft.AspNetCore.Components.QuickGrid

@rendermode InteractiveServer

<div class="card list-card mt-3">
    <div class="card-header">
        <h6 class="title">فهرست باشگاه های خصوصی شهرستان @City?.PersianName</h6>
        @if (privateFacilities is not null)
        {
            <div class="paginator">
                <nav role="navigation">
                    @if (pagination.TotalItemCount.HasValue)
                    {
                        var totalPages = pagination.TotalItemCount;
                        var pageIndex = pagination.CurrentPageIndex;
                        var currentPage = pageIndex + 1;
                        var lastPage = pagination.LastPageIndex + 1;
                        var firstItemNumber = 1 + (pagination.ItemsPerPage * pagination.CurrentPageIndex);
                        var lastItemNumber = pagination.ItemsPerPage * (pagination.CurrentPageIndex + 1);
                        <button @onclick="@(() => GoToPageAsync(pageIndex + 1))"
                        class="btn"
                        aria-current="@AriaCurrentValue(pageIndex + 1)"
                        aria-label="@(pageIndex + 1)"
                        disabled=@((currentPage >= lastPage) ? "disabled" : false)>
                            <img src="/icons/arrow-left.svg" />
                        </button>
                        <div class="total">@string.Format("صفحه {0} از {1}", currentPage, lastPage)</div>
                        <button @onclick="@(() => GoToPageAsync(pageIndex - 1))"
                        class="btn"
                        aria-current="@AriaCurrentValue(pageIndex - 1)"
                        aria-label="@(pageIndex - 1)"
                        disabled=@((pageIndex <= 0) ? "disabled" : false)>
                            <img src="/icons/arrow-right.svg" />
                        </button>
                    }
                </nav>
            </div>
        }
    </div>
    @if (privateFacilities is null)
    {
        <Loading CardMode=true />
    }
    else
    {
        <div class="card-body">
            <div class="table-wrapper">
                <QuickGrid Items="privateFacilities!.AsQueryable()" Pagination="pagination" Theme="" Class="quickgrid-table">
                    <PropertyColumn IsDefaultSortColumn=true Title="عنوان باشگاه" Property="@(facility => facility.Name)" />
                    <PropertyColumn Title="نوع مکان" Property="@(facility => facility.TypeId != null ? facility.Type!.PersianTitle : "نامشخص")" />
                    <PropertyColumn Title="سال آغاز مجوز" Property="@(facility => facility.PrivateFacilityLicenses!.FirstOrDefault()!.StartDate)" />
                    <PropertyColumn Title="سال پایان مجوز" Property="@(facility => facility.PrivateFacilityLicenses!.FirstOrDefault()!.ExpireDate)" />
                    <TemplateColumn>
                        <a class="info-link" href="/Facilities/@context.Id">
                            <img src="/icons/info.svg" />
                        </a>
                    </TemplateColumn>
                </QuickGrid>
            </div>
        </div>
    }
</div>

@code {
    [Parameter]
    public int? CityId { get; set; }

    private City? City = null!;

    private List<PrivateFacility>? privateFacilities;

    protected override async Task OnParametersSetAsync()
    {
        privateFacilities = null;

        using var context = DbFactory.CreateDbContext();

        City = await context.Cities
            .FirstOrDefaultAsync(c => c.Id == CityId);

        if (City is not null)
        {
            privateFacilities = await context.PrivateFacilities
                .Include(facility => facility.City)
                .Include(facility => facility.Type)
                .Include(facility => facility.PrivateFacilityLicenses)
                .Where(facility => facility.City.Id == City.Id)
                .ToListAsync();
        }

        pagination.TotalItemCountChanged += (sender, eventArgs) => StateHasChanged();
    }

    private PaginationState pagination = new PaginationState { ItemsPerPage = 10 };

    private async Task GoToPageAsync(int pageIndex)
    {
        await pagination.SetCurrentPageIndexAsync(pageIndex);
    }

    private string? AriaCurrentValue(int pageIndex)
        => pagination.CurrentPageIndex == pageIndex ? "page" : null;
}
