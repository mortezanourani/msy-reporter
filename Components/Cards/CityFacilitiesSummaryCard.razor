@inject IJSRuntime JSRuntime

<div class="row">
    <div class="col1-1">
        <div class="card city-facilities-card">
            <div class="card-header border-bottom">
                <h6>خلاصه وضعیت اماکن ورزشی شهرستان</h6>
            </div>
            <div class="card-body">
                <div class="city-facilities-bar">
                    <div class="facilities-counts">
                        <div class="msy-facilities">
                            <h6>اماکن ورزشی وزارت ورزش و جوانان</h6>
                            <p>@msyFacilities</p>
                            <p>%@msyFacilitiesPercent</p>
                        </div>
                        <div class="gov-facilities">
                            <h6>اماکن ورزشی سایر ارگان ها</h6>
                            <p>@govFacilities</p>
                            <p>%@govFacilitiesPercent</p>
                        </div>
                        <div class="private-facilities">
                            <h6>باشگاه های خصوصی</h6>
                            <p>@privateFacilities</p>
                            <p>%@privateFacilitiesPercent</p>
                        </div>
                    </div>
                    <div class="percent-bar-wrapper">
                        <canvas id="cityFacilitiesChart"></canvas>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    let cityFacilitiesChart;

    function renderCityFacilitiesChart(data) {
        const ctx = document.getElementById('cityFacilitiesChart').getContext('2d');

        if (cityFacilitiesChart) {
            cityFacilitiesChart.destroy();
        }

        cityFacilitiesChart = new Chart(ctx, {
            type: 'doughnut',
            data: {
                labels: ['اماکن ورزشی وزارت ورزش و جوانان', 'اماکن ورزشی سایر ارگان ها', 'باشگاه های خصوصی'],
                datasets: [{
                    data: data,
                    backgroundColor: ['#2e77ae', '#95bdf2', '#ff8e2b'],
                    hoverBackgroundColor: ['#2e77ae', '#95bdf2', '#ff8e2b']
                }]
            },
            options: {
                responsive: true,
                plugins: {
                    legend: {
                        display: false,
                        position: 'top'
                    },
                    tooltip: {
                        bodyFont: {
                            family: 'IRANSans',
                            size: 11,
                        },
                        titleFont: {
                            family: 'IRANSans',
                            size: 12,
                        }
                    }
                },
                cutout: '65%'
            }
        });
    }

    function updateCityFacilitiesChart (data) {
        if (cityFacilitiesChart) {
            cityFacilitiesChart.data.datasets[0].data = data;
            cityFacilitiesChart.update();
        }
    }
</script>

@code {
    [Parameter]
    public City? City { get; set; }

    private AppDbContext context = default!;

    private int msyFacilities { get; set; } = 0;
    private decimal msyFacilitiesPercent { get; set; } = 0;

    private int govFacilities { get; set; } = 0;
    private decimal govFacilitiesPercent { get; set; } = 0;

    private int privateFacilities { get; set; } = 0;
    private decimal privateFacilitiesPercent { get; set; } = 0;

    private List<decimal> chartCounts = new List<decimal>();

    protected override void OnInitialized()
    {
        context = DbFactory.CreateDbContext();

        SelectCity();
    }

    private void SelectCity()
    {
        var city = context.Cities
            .Include(c => c.Facilities)
            .Include(c => c.GovernmentFacilities)
            .Include(c => c.PrivateFacilities)
            .FirstOrDefault(c => c.Id == City!.Id);

        msyFacilities = city!.Facilities.Count();

        govFacilities = city!.GovernmentFacilities.Count();

        privateFacilities = city!.PrivateFacilities.Count();

        var totalFacilities = msyFacilities + govFacilities + privateFacilities;

        msyFacilitiesPercent = 0;
        govFacilitiesPercent = 0;
        privateFacilitiesPercent = 0;
        if (totalFacilities > 0)
        {
            msyFacilitiesPercent = Math.Round(decimal.Divide(msyFacilities * 100, totalFacilities));
            govFacilitiesPercent = Math.Round(decimal.Divide(govFacilities * 100, totalFacilities));
            privateFacilitiesPercent = Math.Round(decimal.Divide(privateFacilities * 100, totalFacilities));
        }

        chartCounts.Clear();
        chartCounts.Add(msyFacilities);
        chartCounts.Add(govFacilities);
        chartCounts.Add(privateFacilities);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("renderCityFacilitiesChart", chartCounts);
        }

        await JSRuntime.InvokeVoidAsync("renderCityFacilitiesChart", chartCounts);
    }
}
