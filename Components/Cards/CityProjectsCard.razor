@using Microsoft.AspNetCore.Components.QuickGrid

<div class="card city-projects-card">
    <div class="card-header pb-0">
        <h6 class="title">پروژه های نیمه تمام @City!.PersianName</h6>
    </div>
    <div class="card-body">
        <div class="projects-list">
            @if(projects is not null)
            {
                <QuickGrid Items="projects" Pagination="pagination" Theme="" Class="projects-table">
                    <PropertyColumn Sortable="true" Title="عنوان پروژه" Property="@(project => project.Title)" />
                    <PropertyColumn Sortable="true" Title="شهرستان" Property="@(project => project.City.PersianName)" />
                    @* <PropertyColumn Sortable="true" Title="موقعیت" Property="@(project => project.IsRural == true ? "روستایی" : "شهری")" /> *@
                    @* <PropertyColumn Sortable="true" Title="نوع فعالیت" Property="@(project => project!.Type!.PersianTitle)" /> *@
                    @* <PropertyColumn Sortable="true" Title="نوع پروژه" Property="@(project => project.Type.PersianTitle)" /> *@
                    <PropertyColumn Sortable="true" Title="سال آغاز" Property="@(project => project.Year)" />
                    <PropertyColumn Title="پیشرفت فیزیکی" Property="@(project => string.Format("%{0}", project.ProjectProgresses!.Max(progress => progress.Percentage)))" />
                    <TemplateColumn>
                        <a class="info-link" href="/Projects/@context.Id">
                            <span class="material-symbols-rounded">info</span>
                        </a>
                    </TemplateColumn>
                </QuickGrid>

                <div class="paginator">
                    <nav role="navigation">
                        @if (pagination.TotalItemCount.HasValue)
                        {
                            for (var pageIndex = 0; pageIndex <= pagination.LastPageIndex; pageIndex++)
                            {
                                var capturedIndex = pageIndex;
                                <button @onclick="@(() => GoToPageAsync(capturedIndex))"
                                        class="btn @PageButtonClass(capturedIndex)"
                                        aria-current="@AriaCurrentValue(capturedIndex)"
                                        aria-label="@(pageIndex + 1)">
                                    @(pageIndex + 1)
                                </button>
                            }
                        }
                    </nav>
                    <div class="total">
                        @string.Format("{0} پروژه عمرانی", pagination.TotalItemCount)
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@code {
    [Parameter]
    public City? City { get; set; }

    private AppDbContext context = default!;
    private IQueryable<ConstructionProject>? projects;

    protected override void OnInitialized()
    {
        context = DbFactory.CreateDbContext();
    }

    protected override void OnParametersSet()
    {
        projects = context.ConstructionProjects
            .Include(project => project.City)
            .Include(project => project.Type)
            .Include(project => project.ProjectProgresses)
            .Where(project => project.ProjectProgresses
                .Max(progress => progress.Percentage) < 100)
            .OrderByDescending(project => project.ProjectProgresses.Max(progress => progress.Percentage));

        if (City!.Id != 0)
        {
            projects = projects
                .Where(m => m.City.Id == City.Id);
        }

        pagination.TotalItemCountChanged += (sender, eventArgs) => StateHasChanged();
    }

    private PaginationState pagination = new PaginationState { ItemsPerPage = 5 };

    private async Task GoToPageAsync(int pageIndex)
    {
        await pagination.SetCurrentPageIndexAsync(pageIndex);
    }

    private string? PageButtonClass(int pageIndex)
        => pagination.CurrentPageIndex == pageIndex ? "current" : null;

    private string? AriaCurrentValue(int pageIndex)
        => pagination.CurrentPageIndex == pageIndex ? "page" : null;
}
