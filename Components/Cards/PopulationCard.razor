@using System.Globalization

<div class="card cornered2">
    <div class="card-header pb-0">
        <h6>خلاصه وضعیت جمعیت</h6>
    </div>
    <div class="card-body">
        @if (TotalPopulation is null)
        {
            <Loading />
        }
        else
        {
            <h6 class="display-6 total mb-4">@TotalPopulation</h6>
            <div class="details">
                <div class="detail">
                    <p>جمعیت شهری</p>
                    <div class="d-flex">
                        <p class="ms-4">@(UrbanMenPopulation)</p>
                        <p>@(UrbanWomenPopulation)</p>
                    </div>
                </div>
                <div class="detail">
                    <p>جمعیت روستایی</p>
                    <div class="d-flex">
                        <p class="ms-4">@(RuralMenPopulation)</p>
                        <p>@(RuralWomenPopulation)</p>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@code {
    [Parameter]
    public int? CityId { get; set; }

    private int? TotalPopulation = null!;
    private int? UrbanMenPopulation = null!;
    private int? UrbanWomenPopulation = null!;
    private int? RuralMenPopulation = null!;
    private int? RuralWomenPopulation = null!;

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();

        var facilities = await context.PrivateFacilities
            .Include(f => f.PrivateFacilityLicenses)
            .ToListAsync();

        var urbanPopulation = facilities.Count();

        UrbanMenPopulation = facilities
            .Where(f => f.IsRural == true)
            .Count();

        UrbanWomenPopulation = facilities
            .Where(f => f.IsRural == false)
            .Count();

        RuralMenPopulation = facilities
            .Where(f => f.IsRural == true)
            .Count();

        RuralWomenPopulation = facilities
            .Where(f => f.IsRural == false)
            .Count();

        TotalPopulation = UrbanMenPopulation + UrbanWomenPopulation + RuralMenPopulation + RuralWomenPopulation;

        await OnParametersSetAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (CityId is null)
        {
            return;
        }

        using var context = DbFactory.CreateDbContext();

        var facilities = await context.PrivateFacilities
            .Include(f => f.PrivateFacilityLicenses)
            .Where(f => f.CityId == CityId)
            .ToListAsync();

        var urbanPopulation = facilities.Count();

        UrbanMenPopulation = facilities
            .Where(f => f.IsRural == true)
            .Count();

        UrbanWomenPopulation = facilities
            .Where(f => f.IsRural == false)
            .Count();

        RuralMenPopulation = facilities
            .Where(f => f.IsRural == true)
            .Count();

        RuralWomenPopulation = facilities
            .Where(f => f.IsRural == false)
            .Count();

        TotalPopulation = UrbanMenPopulation + UrbanWomenPopulation + RuralMenPopulation + RuralWomenPopulation;
    }
}
