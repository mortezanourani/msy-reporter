@using Microsoft.AspNetCore.Components.QuickGrid

<div class="card msy-facilities-card">
    <div class="card-header">
        <h6 class="title">اماکن دولتی ورزش و جوانان @City!.PersianName</h6>
    </div>
    @if (msyFacilities is null)
    {
        <Loading />
    }
    else
    {
        <div class="card-body pt-0">
            <div class="facilities-list">
                @if (msyFacilities is not null)
                {
                    <QuickGrid Items="msyFacilities!.AsQueryable()" Pagination="pagination" Theme="" Class="facilities-table">
                        <PropertyColumn Title="عنوان باشگاه" Property="@(facility => facility.Name)" />
                        <PropertyColumn Title="نوع مکان" Property="@(facility => facility.TypeId != null ? facility.Type!.PersianTitle : "نامشخص")" />
                        <PropertyColumn Title="موقیعت جغرافیایی" Property="@(facility => facility.IsRural == true ? "روستایی" : "شهری")" />
                        <TemplateColumn>
                            <a class="info-link" href="/Facilities/@context.Id">
                                <span class="material-symbols-rounded">info</span>
                            </a>
                        </TemplateColumn>
                    </QuickGrid>
                }
            </div>
        </div>
        <div class="card-footer pt-0">
            <div class="paginator border-top pt-2">
                <nav role="navigation">
                    @if (pagination.TotalItemCount.HasValue)
                    {
                        for (var pageIndex = 0; pageIndex <= pagination.LastPageIndex; pageIndex++)
                        {
                            var capturedIndex = pageIndex;
                            <button @onclick="@(() => GoToPageAsync(capturedIndex))"
                            class="btn @PageButtonClass(capturedIndex)"
                            aria-current="@AriaCurrentValue(capturedIndex)"
                            aria-label="@(pageIndex + 1)">
                                @(pageIndex + 1)
                            </button>
                        }
                    }
                </nav>
                <div class="total">
                    @string.Format("{0} مکان دولتی", pagination.TotalItemCount)
                </div>
            </div>
        </div>
    }
</div>

@code {
    [Parameter]
    public City? City { get; set; }

    private AppDbContext context = default!;

    private List<Facility>? msyFacilities;

    protected override async Task OnParametersSetAsync()
    {
        context = DbFactory.CreateDbContext();

        msyFacilities = null;

        msyFacilities = await context.Facilities
            .Include(facility => facility.City)
            .Include(facility => facility.FacilityDocuments)
            .Include(facility => facility.FacilityContracts)
            .Include(facility => facility.Type)
            .Where(facility => facility.City.Id == City.Id)
            .ToListAsync();

        pagination.TotalItemCountChanged += (sender, eventArgs) => StateHasChanged();
    }

    private PaginationState pagination = new PaginationState { ItemsPerPage = 5 };

    private async Task GoToPageAsync(int pageIndex)
    {
        await pagination.SetCurrentPageIndexAsync(pageIndex);
    }

    private string? PageButtonClass(int pageIndex)
        => pagination.CurrentPageIndex == pageIndex ? "current" : null;

    private string? AriaCurrentValue(int pageIndex)
        => pagination.CurrentPageIndex == pageIndex ? "page" : null;
}
