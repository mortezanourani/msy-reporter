@inject IJSRuntime JSRuntime

<div class="card color-card">
    <div class="card-header">
        <h6 class="title">درصد نوع پروژه</h6>
    </div>
    <div class="card-body">
        <canvas id="projectsTypesChart" class=""></canvas>
    </div>
    <div class="card-footer legend">
        <div class="legend-row build">
            <h6>احداث</h6>
            <p>@buildProjectsCount</p>
            <p>%@buildProjectsPercentage</p>
        </div>
        <div class="legend-row completion">
            <h6>تکمیل</h6>
            <p>@completionProjectsCount</p>
            <p>%@completionProjectsPercentage</p>
        </div>
        <div class="legend-row maintenance">
            <h6>تعمیر و بهسازی</h6>
            <p>@maintenanceProjectsCount</p>
            <p>%@maintenanceProjectsPercentage</p>
        </div>
    </div>
</div>

<script>
    let projectsTypesChart;

    function renderProjectsTypesChart(data) {
        const ctx = document.getElementById('projectsTypesChart').getContext('2d');

        if (projectsTypesChart) {
            projectsTypesChart.destroy();
        }

        projectsTypesChart = new Chart(ctx, {
            type: 'doughnut',
            data: {
                labels: ['سرپوشیده', 'روباز', 'مجموعه ورزشی'],
                datasets: [{
                    data: data,
                    borderColor: '#1d546a',
                    backgroundColor: ['#ff8e2b', '#95bdf2', '#deebf8'],
                    hoverBackgroundColor: ['#ff9e3b', '#a5cdf2', '#fff']
                }]
            },
            options: {
                responsive: true,
                plugins: {
                    legend: {
                        display: false,
                        position: 'top'
                    },
                    tooltip: {
                        bodyFont: {
                            family: 'IRANSans',
                            size: 11,
                        },
                        titleFont: {
                            family: 'IRANSans',
                            size: 12,
                        }
                    }
                },
                cutout: '65%'
            }
        });
    }

    function updateProjectsTypesChart (data) {
        if (projectsTypesChart) {
            projectsTypesChart.data.datasets[0].data = data;
            projectsTypesChart.update();
        }
    }
</script>

@code {
    [Parameter]
    public City? City { get; set; }

    private List<ConstructionProject>? Projects;
    private List<decimal> chartCounts = new List<decimal>();

    private int buildProjectsCount;
    private decimal buildProjectsPercentage;

    private int completionProjectsCount;
    private decimal completionProjectsPercentage;

    private int maintenanceProjectsCount;
    private decimal maintenanceProjectsPercentage;

    protected override async Task OnParametersSetAsync()
    {
        using var context = DbFactory.CreateDbContext();
     
        Projects = await context.ConstructionProjects
            .Include(project => project.City)
            .Include(project => project.ProjectProgresses)
            .Where(project => project.ProjectProgresses
                .Max(progress => progress.Percentage) < 100)
            .ToListAsync();

        if (City!.Id != 0)
        {
            Projects = Projects.Where(project =>
                project.City.Id == City!.Id)
                .ToList();
        }

 
        var projectsCount = Projects.Count();

        buildProjectsCount = Projects
            .Where(project => project.TypeId == 1)
            .Count();

        completionProjectsCount = Projects
            .Where(project => project.TypeId == 2)
            .Count();

        maintenanceProjectsCount = Projects
            .Where(project => project.TypeId == 3)
            .Count();

        buildProjectsPercentage = 0;
        completionProjectsPercentage = 0;
        maintenanceProjectsPercentage = 0;
        if (projectsCount > 0)
        {
            buildProjectsPercentage = Math.Round(decimal.Divide(buildProjectsCount * 100, projectsCount));
            completionProjectsPercentage = Math.Round(decimal.Divide(completionProjectsCount * 100, projectsCount));
            maintenanceProjectsPercentage = Math.Round(decimal.Divide(maintenanceProjectsCount * 100, projectsCount));
        }

        chartCounts.Clear();
        chartCounts.Add(buildProjectsCount);
        chartCounts.Add(completionProjectsCount);
        chartCounts.Add(maintenanceProjectsCount);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("renderProjectsTypesChart", chartCounts);
        }

        await JSRuntime.InvokeVoidAsync("updateProjectsTypesChart", chartCounts);
    }
}