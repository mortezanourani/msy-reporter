@inject IJSRuntime JSRuntime
@implements IAsyncDisposable

<div class="card">
    <div class="card-header">
        <h6 class="title">درصد شهری و روستایی</h6>
    </div>
    <div class="card-body">
        <canvas id="projectsRuralChart" class=""></canvas>
    </div>
    <div class="card-footer legend">
        <div class="legend-row urban">
            <h6>شهری</h6>
            <p>@urbanProjectsCount</p>
            <p>%@urbanProjectsPercentage</p>
        </div>
        <div class="legend-row rural">
            <h6>روستایی</h6>
            <p>@ruralProjectsCount</p>
            <p>%@ruralProjectsPercentage</p>
        </div>
    </div>
</div>

<script>
    let projectsRuralChart;

    function renderProjectsRuralChart(data) {
        const ctx = document.getElementById('projectsRuralChart').getContext('2d');

        if (projectsRuralChart) {
            projectsRuralChart.destroy();
        }

        projectsRuralChart = new Chart(ctx, {
            type: 'doughnut',
            data: {
                labels: ['شهری', 'روستایی'],
                datasets: [{
                    data: data,
                    backgroundColor: ['#2e77ae', '#ff8e2b'],
                    hoverBackgroundColor: ['#3e87be', '#ff9e3b']
                }]
            },
            options: {
                responsive: true,
                plugins: {
                    legend: {
                        display: false,
                        position: 'top'
                    },
                    tooltip: {
                        bodyFont: {
                            family: 'IRANSans',
                            size: 11,
                        },
                        titleFont: {
                            family: 'IRANSans',
                            size: 12,
                        }
                    }
                },
                cutout: '65%'
            }
        });
    }


    function updateProjectsRuralChart (data) {
        if (projectsRuralChart) {
            projectsRuralChart.data.datasets[0].data = data;
            projectsRuralChart.update();
        }
    }
</script>

@code {
    [Parameter]
    public City? City { get; set; }

    private AppDbContext context = default!;

    private IQueryable<ConstructionProject> projects;
    private List<decimal> ruralPercentages = new List<decimal>();

    private int ruralProjectsCount;
    private decimal ruralProjectsPercentage;

    private int urbanProjectsCount;
    private decimal urbanProjectsPercentage;

    protected override void OnInitialized()
    {
        context = DbFactory.CreateDbContext();
    }

    protected override void OnParametersSet()
    {
        projects = context.ConstructionProjects
            .Include(project => project.ProjectCompletionProgresses)
            .Where(project => project.ProjectCompletionProgresses
                .Max(progress => progress.Percentage) < 100);

        if (City!.Id != 0)
        {
            projects = projects.Where(project =>
                project.City.Id == City!.Id);
        }

        ruralPercentages.Clear();
        var projectsCount = projects.Count();
        if (projectsCount > 0)
        {
            ruralProjectsCount = projects
                .Where(project => project.IsRural == true)
                .Count();

            urbanProjectsCount = projectsCount - ruralProjectsCount;

            ruralProjectsPercentage = Math.Round(decimal.Divide(ruralProjectsCount * 100, projectsCount));
            urbanProjectsPercentage = Math.Round(decimal.Divide(urbanProjectsCount * 100, projectsCount));

            ruralPercentages.Add(ruralProjectsPercentage);
            ruralPercentages.Add(urbanProjectsPercentage);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("renderProjectsRuralChart", ruralPercentages);
        }

        await JSRuntime.InvokeVoidAsync("updateProjectsRuralChart", ruralPercentages);
    }

    public async ValueTask DisposeAsync() => await context.DisposeAsync();
}