@using Microsoft.AspNetCore.Components.QuickGrid

<div class="card city-federations-card">
	<div class="card-header border-bottom">
		<h6 class="title">وضعیت هیات های ورزشی @City?.PersianName</h6>
		<InputSelect class="select" @bind-Value="CityId" @bind-Value:after="OnParametersSetAsync">
			@foreach (City city in Cities!)
			{
				<option value="@city.Id">@city.PersianName</option>
			}
		</InputSelect>
	</div>
	<div class="card-body">
		@if (Federations is null)
		{
			<Loading />
		}
		else
		{
			<div class="summary">
				<div class="summary-item">
					<p>هیات های فعال:</p>
					<b>@activeFederationsCount</b>
				</div>
				<div class="summary-item">
					<p>تعداد هیات های دارای شناسه:</p>
					<b>@identifiedFederationsCount</b>
				</div>
				<div class="summary-item">
					<p>تعداد احکام ریاست:</p>
					<b>@federationPresidentsCount</b>
				</div>
				<div class="summary-item">
					<p>تعداد احکام سرپرستی:</p>
					<b>@federationInterimPresidentsCount</b>
				</div>
			</div>

			<div class="federations-list">
				@if (Federations is not null)
				{
					<QuickGrid Pagination="pagination" Items="Federations.AsQueryable()" Theme="" Class="federations-table">
						<PropertyColumn Title="عنوان هیات" Property="@(federation => federation.Federation.PersianName)" />
						@if (CityId != 0)
						{
							<PropertyColumn Title="بخش" Property="@(federation => federation.District)" />
						}
						<PropertyColumn Title="شناسه ملی" Property="@(federation => federation.NationalId)" />
						<PropertyColumn Title="رئیس / سرپرست" Property="@(federation => federation.LocalFederationPresidents.OrderByDescending(p => p.AppointmentDate).FirstOrDefault()!.Name)" />
						<PropertyColumn Title="نوع حکم" Property="@(federation => federation.LocalFederationPresidents.OrderByDescending(p => p.AppointmentDate).FirstOrDefault()!.IsPresident ? "رئیس" : "سرپرست")" />
						<TemplateColumn>
							<a class="info-link" href="/SportsGroup/Federations/@context.Id">
								<img src="/icons/info.svg" />
							</a>
						</TemplateColumn>
					</QuickGrid>

					<div class="paginator">
						<nav role="navigation">
							@if (pagination.TotalItemCount.HasValue)
							{
								for (var pageIndex = 0; pageIndex <= pagination.LastPageIndex; pageIndex++)
								{
									var capturedIndex = pageIndex;
									<button @onclick="@(() => GoToPageAsync(capturedIndex))"
									class="btn @PageButtonClass(capturedIndex)"
									aria-current="@AriaCurrentValue(capturedIndex)"
									aria-label="@(pageIndex + 1)">
										@(pageIndex + 1)
									</button>
								}
							}
						</nav>
						<div class="total">
							@string.Format("{0} هیات", pagination.TotalItemCount)
						</div>
					</div>
				}
			</div>
		}
	</div>
</div>

@code {
	[Parameter]
	public int CityId { get; set; }

	private City? City;
	private List<City> Cities = new List<City>();

	private List<LocalFederation>? Federations;

	private int activeFederationsCount;
	private int identifiedFederationsCount;
	private int federationPresidentsCount;
	private int federationInterimPresidentsCount;

	protected override async Task OnInitializedAsync()
	{
		using var context = DbFactory.CreateDbContext();

		Cities = await context.Cities.ToListAsync();

		CityId = Cities.FirstOrDefault()!.Id;
	}

	protected override async Task OnParametersSetAsync()
	{
		Federations = null;

		using var context = DbFactory.CreateDbContext();
		
		City = await context.Cities
			.FirstOrDefaultAsync(city => city.Id == CityId);

		Federations = await context.LocalFederations
			.Include(federation => federation.City)
			.Include(federation => federation.Federation)
			.Include(federation => federation.LocalFederationPresidents)
			.Where(federation => federation.City!.Id == CityId)
			.OrderBy(federation => federation.Federation.PersianName)
			.ToListAsync();

		activeFederationsCount = Federations!
			.Count(federation => federation.LocalFederationPresidents.Any());

		identifiedFederationsCount = Federations!
			.Count(federation => !string.IsNullOrEmpty(federation.NationalId));

		federationPresidentsCount = Federations!
			.Count(federation => federation.LocalFederationPresidents
				.OrderByDescending(president => president.AppointmentDate)
				.FirstOrDefault()!
				.IsPresident == true);

		federationInterimPresidentsCount = Federations!
			.Count(federation => federation.LocalFederationPresidents
				.OrderByDescending(president => president.AppointmentDate)
				.FirstOrDefault()!
				.IsPresident == false);

		pagination.TotalItemCountChanged += (sender, eventArgs) => StateHasChanged();
	}

	private PaginationState pagination = new PaginationState { ItemsPerPage = 10 };

	private async Task GoToPageAsync(int pageIndex)
	{
		await pagination.SetCurrentPageIndexAsync(pageIndex);
	}

	private string? PageButtonClass(int pageIndex)
		=> pagination.CurrentPageIndex == pageIndex ? "current" : null;

	private string? AriaCurrentValue(int pageIndex)
		=> pagination.CurrentPageIndex == pageIndex ? "page" : null;
}
