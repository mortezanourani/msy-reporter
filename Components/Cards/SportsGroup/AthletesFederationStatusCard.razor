@using Microsoft.AspNetCore.Components.QuickGrid

@rendermode InteractiveServer

@if (Federations is null || Year is null)
{
	<Loading CardMode=true />
}
else
{
	<div class="card list-card">
		<div class="card-header border-bottom">
			<h6 class="title">ورزشکاران سازمان یافته سال @Year شهرستان</h6>
			<InputSelect class="select" @bind-Value="FederationId" @bind-Value:after="OnParametersSetAsync">
				@foreach (Federation federation in Federations!)
				{
					<option value="@federation.Id">@federation.PersianName</option>
				}
			</InputSelect>
		</div>
		<div class="card-body">
			<div class="city-count">
				<div class="item-count">
					<img src="/icons/man-blue.svg" />
					@($"{menAthletesCount:#,0}")
				</div>
				<div class="item-count">
					<img src="/icons/woman-blue.svg" />
					@($"{womenAthletesCount:#,0}")
				</div>
				<div class="item-count">
					<img src="/icons/genders-blue.svg" />
					@($"{menAthletesCount + womenAthletesCount:#,0}")
				</div>
			</div>
			<div class="table-wrapper mt-3">
				@if (Insurances is not null)
				{
					<QuickGrid Items="Insurances.AsQueryable()" Theme="" Class="quickgrid-table">
						<PropertyColumn Title="شهرستان" Property="@(insurance => insurance.Key.PersianName)" />
						<PropertyColumn Title="آقایان" Property="@(insurance => $"{insurance.Sum(f => f.MenCount):#,0}")" />
						<PropertyColumn Title="بانوان" Property="@(insurance => $"{insurance.Sum(f => f.WomenCount):#,0}")" />
						<PropertyColumn Title="مجموع" Property="@(insurance => $"{insurance.Sum(f => f.MenCount + f.WomenCount):#,0}")" />
					</QuickGrid>
				}
			</div>
		</div>
	</div>
}

@code {
	[Parameter]
	public int? Year { get; set; } = null!;

	[Parameter]
	public int? FederationId { get; set; } = null!;

	private AppDbContext context = default!;

	private List<IGrouping<City, Insurance>>? Insurances;

	private List<Federation>? Federations = null!;

	private int? menAthletesCount;
	private int? womenAthletesCount;

	protected override async Task OnInitializedAsync()
	{
		context = DbFactory.CreateDbContext();

		Federations = await context.Federations
			.Where(m => m.Id != 0)
			.OrderBy(m => m.PersianName)
			.ToListAsync();

		FederationId = Federations.FirstOrDefault()!.Id;
	}

	protected override async Task OnParametersSetAsync()
	{
		Insurances = await context.Insurances
			.Include(m => m.City)
			.OrderBy(m => m.City.PersianName)
			.Where(m => m.Year == Year)
			.Where(m => m.FederationId == FederationId)
			.GroupBy(m => m.City)
			.ToListAsync();

		menAthletesCount = Insurances
			.Sum(m => m.Sum(
				m => m.MenCount)
			);

		womenAthletesCount = Insurances
			.Sum(m => m.Sum(
				m => m.WomenCount)
			);
	}
}
