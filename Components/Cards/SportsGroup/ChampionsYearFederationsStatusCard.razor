@using Microsoft.AspNetCore.Components.QuickGrid

@if (Federations is null)
{
	<Loading CardMode=true />
}
else
{
	<div class="card federation-champions-card">
		<div class="card-header">
			<h6 class="display-6">خلاصه وضعیت قهرمانان در سال @Year به تفکیک هیات های ورزشی</h6>
		</div>
		<div class="card-body">
			<div class="table-wrapper">
				<QuickGrid Items="FederationChampions!.AsQueryable()" Theme="" Class="quickgrid-table">
					<PropertyColumn Title="هیات ورزشی" Property="@(m => m.Select(g => g.Tournament.Federation.PersianName).FirstOrDefault())" />
					<PropertyColumn Title="مدال آوران" Property="@(m => m.GroupBy(g => g.AthleteId).Count())" />
					<PropertyColumn Title="مدال آوران آقا" Property="@(m => m.Where(g => g.Athlete.GenderId == 1).GroupBy(g => g.AthleteId).Count())" />
					<PropertyColumn Title="مدال آوران بانوان" Property="@(m => m.Where(g => g.Athlete.GenderId == 2).GroupBy(g => g.AthleteId).Count())" />
					<PropertyColumn Title="مدال ها" Property="@(m => m.Sum(g => g.MedalsCount))" />
					<PropertyColumn Title="مدال های آقایان" Property="@(m => m.Where(g => g.Athlete.GenderId == 1).Sum(g => g.MedalsCount))" />
					<PropertyColumn Title="مدال های بانوان" Property="@(m => m.Where(g => g.Athlete.GenderId == 2).Sum(g => g.MedalsCount))" />
				</QuickGrid>
			</div>
		</div>
	</div>

	<div class="card federation-champions-card">
		<div class="card-header border-bottom">
			<h6 class="display-6">خلاصه وضعیت قهرمانان هیات @Federation?.PersianName در سال @Year</h6>
			@*
			<InputSelect class="select" @bind-Value="FederationId" @bind-Value:after="OnParametersSetAsync">
				@foreach (Federation federation in Federations!)
				{
					<option value="@federation.Id">@federation.PersianName</option>
				}
			</InputSelect>
 *@
		</div>
		<div class="card-body">
			@if (Federation is null || Year is null)
			{
				<Loading />
			}
			else
			{
				@*
				<div class="summary">
					<div class="summary-item">
						<p>تعداد مدال آوران:</p>
						<b>@championsCount</b>
					</div>
					<div class="summary-item">
						<p>تعداد مدال آوران آقا:</p>
						<b>@menChampionsCount</b>
					</div>
					<div class="summary-item">
						<p>تعداد مدال آوران خانم:</p>
						<b>@womenChampionsCount</b>
					</div>
				</div>
				<div class="summary mt-0">
					<div class="summary-item">
						<p>تعداد مدال ها:</p>
						<b>@medalsCount</b>
					</div>
					<div class="summary-item">
						<p>تعداد مدال های طلا:</p>
						<b>@goldMedalsCount</b>
					</div>
					<div class="summary-item">
						<p>تعداد مدال های نقره:</p>
						<b>@silverMedalsCount</b>
					</div>
					<div class="summary-item">
						<p>تعداد مدال های برنز:</p>
						<b>@bronzeMedalsCount</b>
					</div>
				</div>
				<div class="medals-list">
					@if (ageGroupChampions is not null)
					{
						<QuickGrid Items="ageGroupChampions.AsQueryable()" Theme="" Class="champions-table">
							<PropertyColumn Title="رده سنی" Property="@(ageGroupChampion => ageGroupChampion.ageGroup.PersianName)" />
							<PropertyColumn Title="مدال آوران" Property="@(ageGroupChampion => ageGroupChampion.championsCount)" />
							<PropertyColumn Title="مدال آوران آقایان" Property="@(ageGroupChampion => ageGroupChampion.menChampionsCount)" />
							<PropertyColumn Title="مدال آوران بانوان" Property="@(ageGroupChampion => ageGroupChampion.womenChampionsCount)" />
							<PropertyColumn Title="مدال طلا" Property="@(ageGroupChampion => ageGroupChampion.goldMedalsCount)" />
							<PropertyColumn Title="مدال نقره" Property="@(ageGroupChampion => ageGroupChampion.silverMedalsCount)" />
							<PropertyColumn Title="مدال برنز" Property="@(ageGroupChampion => ageGroupChampion.bronzeMedalsCount)" />
							<PropertyColumn Title="مجموع مدال ها" Property="@(ageGroupChampion => ageGroupChampion.medalsCount)" />
						</QuickGrid>
					}
				</div>
*@
			}
		</div>
	</div>
}

@code {
	[Parameter]
	public int? Year { get; set; } = null!;

	private AppDbContext context = default!;

	private List<Federation>? Federations { get; set; } = null!;

	private Federation? Federation = null!;

	private List<ChampionsAgeGroup>? ageGroupChampions;

	private List<IGrouping<int, Champion>>? FederationChampions = null!;

	private class ChampionsAgeGroup
	{
		public AgeGroup ageGroup { get; set; }
		public int championsCount { get; set; }
		public int menChampionsCount { get; set; }
		public int womenChampionsCount { get; set; }
		public int medalsCount { get; set; }
		public int goldMedalsCount { get; set; }
		public int silverMedalsCount { get; set; }
		public int bronzeMedalsCount { get; set; }
	};

	private int championsCount;
	private int menChampionsCount;
	private int womenChampionsCount;

	private int medalsCount;
	private int goldMedalsCount;
	private int silverMedalsCount;
	private int bronzeMedalsCount;

	protected override async Task OnInitializedAsync()
	{
		context = DbFactory.CreateDbContext();

		Federations = await context.Federations
			.Include(federation => federation.Tournaments)
				.ThenInclude(tournament => tournament.Champions)
			.Where(federation => federation.Tournaments
				.Any(tournament =>
					tournament.Year == Year
					&&
					tournament.Champions.Count(champion => champion.Medal != null) > 0))
			.Where(federation => federation.IsChampionship)
			.OrderBy(federation => federation.PersianName)
			.ToListAsync();

		Federation = Federations!
			.FirstOrDefault();

		await OnParametersSetAsync();
	}

	protected override async Task OnParametersSetAsync()
	{
		FederationChampions = await context.Champions
			.Include(m => m.Tournament)
				.ThenInclude(m => m.Federation)
			.Include(m => m.Athlete)
			.Where(m => m.MedalsCount > 0)
			.GroupBy(m => m.Tournament.FederationId)
			.ToListAsync();

		// Federations = await context.Federations
		// 	.Include(federation => federation.Tournaments)
		// 		.ThenInclude(tournament => tournament.Champions)
		// 	.Where(federation => federation.Tournaments
		// 		.Any(tournament =>
		// 			tournament.Year == Year
		// 			&&
		// 			tournament.Champions.Count(champion => champion.Medal != null) > 0))
		// 	.Where(federation => federation.IsChampionship)
		// 	.OrderBy(federation => federation.PersianName)
		// 	.ToListAsync();

		// Federation = Federations!
		// 	.FirstOrDefault(m => m.Id == FederationId!);

		// var champions = await context.Athletes
		// 	.Include(athlete => athlete.Gender)
		// 	.Include(athlete => athlete.Champions)
		// 		.ThenInclude(champion => champion.Tournament)
		// 	.Include(athlete => athlete.Champions)
		// 		.ThenInclude(champion => champion.Medal)
		// 	.Where(athlete => athlete.Champions
		// 		.Any(champion =>
		// 			champion.Tournament.FederationId == FederationId
		// 			&&
		// 			champion.Tournament.Year == Year))
		// 	.Where(athlete => athlete.Champions
		// 		.Any(champion => champion.Medal != null))
		// 	.ToListAsync();

		// championsCount = champions.Count();

		// menChampionsCount = champions
		// 	.Count(champion => champion.Gender.Id == 1);

		// womenChampionsCount = champions
		// 	.Count(champion => champion.Gender.Id == 2);

		// var medals = context.Champions
		// 	.Include(champion => champion.Medal)
		// 	.Include(champion => champion.Tournament)
		// 	.Where(champion =>
		// 		champion.Tournament.Year == Year
		// 		&&
		// 		champion.Tournament.FederationId == FederationId);

		// medalsCount = medals
		// 	.Sum(medal => medal.MedalsCount!.Value);

		// goldMedalsCount = medals
		// 	.Where(medal => medal.Medal!.Color == "Gold")
		// 	.Sum(medal => medal.MedalsCount!.Value);

		// silverMedalsCount = medals
		// 	.Where(medal => medal.Medal!.Color == "Silver")
		// 	.Sum(medal => medal.MedalsCount!.Value);

		// bronzeMedalsCount = medals
		// 	.Where(medal => medal.Medal!.Color == "Bronze")
		// 	.Sum(medal => medal.MedalsCount!.Value);

		// var ageGroups = context.AgeGroups
		// 	.Include(ageGroup => ageGroup.Champions)
		// 		.ThenInclude(champion => champion.Tournament)
		// 	.Include(ageGroup => ageGroup.Champions)
		// 		.ThenInclude(champion => champion.Athlete)
		// 	.Where(ageGroup =>
		// 		ageGroup.Champions.Any(champion =>
		// 			champion.Tournament.Year == Year
		// 			&&
		// 			champion.Tournament.FederationId == FederationId));

		// ageGroupChampions = new List<ChampionsAgeGroup>();
		// foreach (var ageGroup in ageGroups)
		// {
		// 	var groupChampions = context.Athletes
		// 		.Include(athlete => athlete.Champions)
		// 			.ThenInclude(champion => champion.Tournament)
		// 		.Where(athlete => athlete.Champions
		// 			.Any(champion =>
		// 				champion.Tournament.Year == Year
		// 				&&
		// 				champion.Tournament.FederationId == FederationId
		// 				&&
		// 				champion.AgeGroupId == ageGroup.Id
		// 				&&
		// 				champion.Medal != null));

		// 	var groupMedals = context.Champions
		// 		.Include(champion => champion.Medal)
		// 		.Include(champion => champion.Tournament)
		// 		.Where(champion =>
		// 				champion.Tournament.Year == Year
		// 				&&
		// 				champion.Tournament.FederationId == FederationId
		// 				&&
		// 				champion.AgeGroupId == ageGroup.Id);

		// 	ageGroupChampions.Add(
		// 		new ChampionsAgeGroup
		// 			{
		// 				ageGroup = ageGroup,
		// 				championsCount = groupChampions.Count(),
		// 				menChampionsCount = groupChampions.Count(champion => champion.GenderId == 1),
		// 				womenChampionsCount = groupChampions.Count(champion => champion.GenderId == 2),
		// 				medalsCount = groupMedals.Sum(medal => medal.MedalsCount!.Value),
		// 				goldMedalsCount = groupMedals.Where(medal => medal.Medal!.Color == "Gold").Sum(medal => medal.MedalsCount!.Value),
		// 				silverMedalsCount = groupMedals.Where(medal => medal.Medal!.Color == "Silver").Sum(medal => medal.MedalsCount!.Value),
		// 				bronzeMedalsCount = groupMedals.Where(medal => medal.Medal!.Color == "Bronze").Sum(medal => medal.MedalsCount!.Value),
		// 			}
		// 	);
		// }
	}
}
