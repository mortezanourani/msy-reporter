@using Microsoft.AspNetCore.Components.QuickGrid

<div class="card private-facilities-card">
    <div class="card-header pb-0">
        <h6 class="title">فهرست باشگاه های خصوصی شهرستان @City!.PersianName</h6>
        <div class="paginator">
            <nav role="navigation">
                @if (pagination.TotalItemCount.HasValue)
                {
                    var totalPages = pagination.TotalItemCount;
                    var pageIndex = pagination.CurrentPageIndex;
                    var currentPage = pageIndex + 1;
                    var lastPage = pagination.LastPageIndex + 1;
                    var firstItemNumber = 1 + (pagination.ItemsPerPage * pagination.CurrentPageIndex);
                    var lastItemNumber = pagination.ItemsPerPage * (pagination.CurrentPageIndex + 1);
                    <button @onclick="@(() => GoToPageAsync(pageIndex + 1))"
                            class="btn"
                            aria-current="@AriaCurrentValue(pageIndex + 1)"
                            aria-label="@(pageIndex + 1)"
                            disabled=@((currentPage >= lastPage) ? "disabled" : false)>
                        <span class="material-symbols-rounded">chevron_left</span>
                    </button>
                    <div class="total">@string.Format("صفحه {0} از {1}", currentPage, lastPage)</div>
                    <button @onclick="@(() => GoToPageAsync(pageIndex - 1))"
                            class="btn"
                            aria-current="@AriaCurrentValue(pageIndex - 1)"
                            aria-label="@(pageIndex - 1)"
                            disabled=@((pageIndex <= 0) ? "disabled" : false)>
                        <span class="material-symbols-rounded">chevron_right</span>
                    </button>
                }
            </nav>
        </div>
    </div>
    <div class="card-body pt-0">
        <div class="facilities-list">
            @if (privateFacilities is not null)
            {
                <QuickGrid Items="privateFacilities" Pagination="pagination" Theme="" Class="facilities-table">
                    <PropertyColumn Sortable="true" Title="عنوان باشگاه" Property="@(facility => facility.Name)" />
                    <PropertyColumn Sortable="true" Title="نوع مکان" Property="@(facility => facility.TypeId != null ? facility.Type!.PersianTitle : "نامشخص")" />
                    <PropertyColumn Sortable="true" Title="سال آغاز مجوز" Property="@(facility => facility.PrivateFacilityLicenses!.FirstOrDefault()!.StartDate)" />
                    <PropertyColumn Sortable="true" Title="سال پایان مجوز" Property="@(facility => facility.PrivateFacilityLicenses!.FirstOrDefault()!.ExpireDate)" />
                    <TemplateColumn>
                        <a class="info-link" href="/Facilities/@context.Id">
                            <span class="material-symbols-rounded">info</span>
                        </a>
                    </TemplateColumn>
                </QuickGrid>

            }
        </div>
    </div>
</div>

@code {
    [Parameter]
    public City? City { get; set; }

    private AppDbContext context = default!;
    private IQueryable<PrivateFacility>? privateFacilities;

    protected override void OnInitialized()
    {
        context = DbFactory.CreateDbContext();
    }

    protected override void OnParametersSet()
    {
        var city = context.Cities
            .Include(city => city.PrivateFacilities)
                .ThenInclude(facility => facility.Type)
            .Include(city => city.PrivateFacilities)
                .ThenInclude(facility => facility.PrivateFacilityLicenses)
            .FirstOrDefault(city => city.Id == City!.Id);

        privateFacilities = city!.PrivateFacilities
            .AsQueryable();

        pagination.TotalItemCountChanged += (sender, eventArgs) => StateHasChanged();
    }

    private PaginationState pagination = new PaginationState { ItemsPerPage = 10 };

    private async Task GoToPageAsync(int pageIndex)
    {
        await pagination.SetCurrentPageIndexAsync(pageIndex);
    }

    private string? AriaCurrentValue(int pageIndex)
        => pagination.CurrentPageIndex == pageIndex ? "page" : null;
}
